/* tslint:disable */
/* eslint-disable */
/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

The version of the OpenAPI document: v2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContextCreateNewContextRequest } from '../models';
// @ts-ignore
import { ContextCreateNewContextRequestOwner } from '../models';
// @ts-ignore
import { ContextCreateNewContextResponse } from '../models';
// @ts-ignore
import { ContextCreateNewContextdefaultResponse } from '../models';
// @ts-ignore
import { ContextCreateRestriction409Response } from '../models';
// @ts-ignore
import { ContextCreateRestrictionRequest } from '../models';
// @ts-ignore
import { ContextCreateRestrictionResponse } from '../models';
// @ts-ignore
import { ContextDeleteRestrictionResponse } from '../models';
// @ts-ignore
import { ContextGetInformationResponse } from '../models';
// @ts-ignore
import { ContextGetInformationdefaultResponse } from '../models';
// @ts-ignore
import { ContextGetRestrictions401Response } from '../models';
// @ts-ignore
import { ContextGetRestrictions404Response } from '../models';
// @ts-ignore
import { ContextGetRestrictions429Response } from '../models';
// @ts-ignore
import { ContextGetRestrictions500Response } from '../models';
// @ts-ignore
import { ContextGetRestrictionsResponse } from '../models';
// @ts-ignore
import { ContextListEnvironmentVariablesResponse } from '../models';
// @ts-ignore
import { ContextListEnvironmentVariablesdefaultResponse } from '../models';
// @ts-ignore
import { ContextListOwnerContextsResponse } from '../models';
// @ts-ignore
import { ContextListOwnerContextsdefaultResponse } from '../models';
// @ts-ignore
import { ContextProjectRestrictionsList } from '../models';
// @ts-ignore
import { ContextRemoveContextResponse } from '../models';
// @ts-ignore
import { ContextRemoveContextdefaultResponse } from '../models';
// @ts-ignore
import { ContextRemoveEnvironmentVariableResponse } from '../models';
// @ts-ignore
import { ContextRemoveEnvironmentVariabledefaultResponse } from '../models';
// @ts-ignore
import { ContextUpdateEnvironmentVariableRequest } from '../models';
// @ts-ignore
import { ContextUpdateEnvironmentVariableResponse } from '../models';
// @ts-ignore
import { ContextUpdateEnvironmentVariabledefaultResponse } from '../models';
// @ts-ignore
import { RestrictionCreated } from '../models';
// @ts-ignore
import { RestrictionDeleted } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContextApi - axios parameter creator
 * @export
 */
export const ContextApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new context.
         * @summary Create a new context
         * @param {ContextCreateNewContextRequest} [contextCreateNewContextRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewContext: async (contextCreateNewContextRequest?: ContextCreateNewContextRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/context`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contextCreateNewContextRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/context',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contextCreateNewContextRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [__EXPERIMENTAL__] Creates project restriction on a context.
         * @summary ðŸ§ª Create context restriction
         * @param {string} contextId An opaque identifier of a context.
         * @param {ContextCreateRestrictionRequest} contextCreateRestrictionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRestriction: async (contextId: string, contextCreateRestrictionRequest: ContextCreateRestrictionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextId' is not null or undefined
            assertParamExists('createRestriction', 'contextId', contextId)
            // verify required parameter 'contextCreateRestrictionRequest' is not null or undefined
            assertParamExists('createRestriction', 'contextCreateRestrictionRequest', contextCreateRestrictionRequest)
            const localVarPath = `/context/{context_id}/restrictions`
                .replace(`{${"context_id"}}`, encodeURIComponent(String(contextId !== undefined ? contextId : `-context_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contextCreateRestrictionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/context/{context_id}/restrictions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contextCreateRestrictionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [__EXPERIMENTAL__] Deletes a project restriction on a context.
         * @summary ðŸ§ª Delete context restriction
         * @param {string} contextId An opaque identifier of a context.
         * @param {string} restrictionId An opaque identifier of a context restriction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestriction: async (contextId: string, restrictionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextId' is not null or undefined
            assertParamExists('deleteRestriction', 'contextId', contextId)
            // verify required parameter 'restrictionId' is not null or undefined
            assertParamExists('deleteRestriction', 'restrictionId', restrictionId)
            const localVarPath = `/context/{context_id}/restrictions/{restriction_id}`
                .replace(`{${"context_id"}}`, encodeURIComponent(String(contextId !== undefined ? contextId : `-context_id-`)))
                .replace(`{${"restriction_id"}}`, encodeURIComponent(String(restrictionId !== undefined ? restrictionId : `-restriction_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/context/{context_id}/restrictions/{restriction_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns basic information about a context.
         * @summary Get a context
         * @param {string} contextId ID of the context (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation: async (contextId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextId' is not null or undefined
            assertParamExists('getInformation', 'contextId', contextId)
            const localVarPath = `/context/{context-id}`
                .replace(`{${"context-id"}}`, encodeURIComponent(String(contextId !== undefined ? contextId : `-context-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/context/{context-id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [__EXPERIMENTAL__] Gets a list of project restrictions associated with a context.
         * @summary ðŸ§ª Get context restrictions
         * @param {string} contextId An opaque identifier of a context.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestrictions: async (contextId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextId' is not null or undefined
            assertParamExists('getRestrictions', 'contextId', contextId)
            const localVarPath = `/context/{context_id}/restrictions`
                .replace(`{${"context_id"}}`, encodeURIComponent(String(contextId !== undefined ? contextId : `-context_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/context/{context_id}/restrictions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List information about environment variables in a context, not including their values.
         * @summary List environment variables
         * @param {string} contextId ID of the context (UUID)
         * @param {string} [pageToken] A token to retrieve the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironmentVariables: async (contextId: string, pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextId' is not null or undefined
            assertParamExists('listEnvironmentVariables', 'contextId', contextId)
            const localVarPath = `/context/{context-id}/environment-variable`
                .replace(`{${"context-id"}}`, encodeURIComponent(String(contextId !== undefined ? contextId : `-context-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (pageToken !== undefined) {
                localVarQueryParameter['page-token'] = pageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/context/{context-id}/environment-variable',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all contexts for an owner.
         * @summary List contexts
         * @param {string} [ownerId] The unique ID of the owner of the context. Specify either this or owner-slug.
         * @param {string} [ownerSlug] A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts.
         * @param {'account' | 'organization'} [ownerType] The type of the owner. Defaults to \&quot;organization\&quot;. Accounts are only used as context owners in server.
         * @param {string} [pageToken] A token to retrieve the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOwnerContexts: async (ownerId?: string, ownerSlug?: string, ownerType?: 'account' | 'organization', pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/context`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (ownerId !== undefined) {
                localVarQueryParameter['owner-id'] = ownerId;
            }

            if (ownerSlug !== undefined) {
                localVarQueryParameter['owner-slug'] = ownerSlug;
            }

            if (ownerType !== undefined) {
                localVarQueryParameter['owner-type'] = ownerType;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page-token'] = pageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/context',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a context
         * @param {string} contextId ID of the context (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeContext: async (contextId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextId' is not null or undefined
            assertParamExists('removeContext', 'contextId', contextId)
            const localVarPath = `/context/{context-id}`
                .replace(`{${"context-id"}}`, encodeURIComponent(String(contextId !== undefined ? contextId : `-context-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/context/{context-id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an environment variable from a context.
         * @summary Remove an environment variable
         * @param {string} envVarName The name of the environment variable
         * @param {string} contextId ID of the context (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEnvironmentVariable: async (envVarName: string, contextId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'envVarName' is not null or undefined
            assertParamExists('removeEnvironmentVariable', 'envVarName', envVarName)
            // verify required parameter 'contextId' is not null or undefined
            assertParamExists('removeEnvironmentVariable', 'contextId', contextId)
            const localVarPath = `/context/{context-id}/environment-variable/{env-var-name}`
                .replace(`{${"env-var-name"}}`, encodeURIComponent(String(envVarName !== undefined ? envVarName : `-env-var-name-`)))
                .replace(`{${"context-id"}}`, encodeURIComponent(String(contextId !== undefined ? contextId : `-context-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/context/{context-id}/environment-variable/{env-var-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or update an environment variable within a context. Returns information about the environment variable, not including its value.
         * @summary Add or update an environment variable
         * @param {string} contextId ID of the context (UUID)
         * @param {string} envVarName The name of the environment variable
         * @param {ContextUpdateEnvironmentVariableRequest} [contextUpdateEnvironmentVariableRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentVariable: async (contextId: string, envVarName: string, contextUpdateEnvironmentVariableRequest?: ContextUpdateEnvironmentVariableRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextId' is not null or undefined
            assertParamExists('updateEnvironmentVariable', 'contextId', contextId)
            // verify required parameter 'envVarName' is not null or undefined
            assertParamExists('updateEnvironmentVariable', 'envVarName', envVarName)
            const localVarPath = `/context/{context-id}/environment-variable/{env-var-name}`
                .replace(`{${"context-id"}}`, encodeURIComponent(String(contextId !== undefined ? contextId : `-context-id-`)))
                .replace(`{${"env-var-name"}}`, encodeURIComponent(String(envVarName !== undefined ? envVarName : `-env-var-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contextUpdateEnvironmentVariableRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/context/{context-id}/environment-variable/{env-var-name}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contextUpdateEnvironmentVariableRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContextApi - functional programming interface
 * @export
 */
export const ContextApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContextApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new context.
         * @summary Create a new context
         * @param {ContextApiCreateNewContextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewContext(requestParameters: ContextApiCreateNewContextRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextCreateNewContextResponse>> {
            const contextCreateNewContextRequest: ContextCreateNewContextRequest = {
                name: requestParameters.name,
                owner: requestParameters.owner
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewContext(contextCreateNewContextRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * [__EXPERIMENTAL__] Creates project restriction on a context.
         * @summary ðŸ§ª Create context restriction
         * @param {ContextApiCreateRestrictionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRestriction(requestParameters: ContextApiCreateRestrictionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestrictionCreated>> {
            const contextCreateRestrictionRequest: ContextCreateRestrictionRequest = {
                project_id: requestParameters.project_id,
                restriction_type: requestParameters.restriction_type,
                restriction_value: requestParameters.restriction_value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRestriction(requestParameters.contextId, contextCreateRestrictionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * [__EXPERIMENTAL__] Deletes a project restriction on a context.
         * @summary ðŸ§ª Delete context restriction
         * @param {ContextApiDeleteRestrictionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRestriction(requestParameters: ContextApiDeleteRestrictionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestrictionDeleted>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRestriction(requestParameters.contextId, requestParameters.restrictionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns basic information about a context.
         * @summary Get a context
         * @param {ContextApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformation(requestParameters: ContextApiGetInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextGetInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformation(requestParameters.contextId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * [__EXPERIMENTAL__] Gets a list of project restrictions associated with a context.
         * @summary ðŸ§ª Get context restrictions
         * @param {ContextApiGetRestrictionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRestrictions(requestParameters: ContextApiGetRestrictionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextProjectRestrictionsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRestrictions(requestParameters.contextId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List information about environment variables in a context, not including their values.
         * @summary List environment variables
         * @param {ContextApiListEnvironmentVariablesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEnvironmentVariables(requestParameters: ContextApiListEnvironmentVariablesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextListEnvironmentVariablesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEnvironmentVariables(requestParameters.contextId, requestParameters.pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all contexts for an owner.
         * @summary List contexts
         * @param {ContextApiListOwnerContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOwnerContexts(requestParameters: ContextApiListOwnerContextsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextListOwnerContextsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOwnerContexts(requestParameters.ownerId, requestParameters.ownerSlug, requestParameters.ownerType, requestParameters.pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a context
         * @param {ContextApiRemoveContextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeContext(requestParameters: ContextApiRemoveContextRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextRemoveContextResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeContext(requestParameters.contextId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an environment variable from a context.
         * @summary Remove an environment variable
         * @param {ContextApiRemoveEnvironmentVariableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEnvironmentVariable(requestParameters: ContextApiRemoveEnvironmentVariableRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextRemoveEnvironmentVariableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEnvironmentVariable(requestParameters.envVarName, requestParameters.contextId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create or update an environment variable within a context. Returns information about the environment variable, not including its value.
         * @summary Add or update an environment variable
         * @param {ContextApiUpdateEnvironmentVariableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnvironmentVariable(requestParameters: ContextApiUpdateEnvironmentVariableRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextUpdateEnvironmentVariableResponse>> {
            const contextUpdateEnvironmentVariableRequest: ContextUpdateEnvironmentVariableRequest = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnvironmentVariable(requestParameters.contextId, requestParameters.envVarName, contextUpdateEnvironmentVariableRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContextApi - factory interface
 * @export
 */
export const ContextApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContextApiFp(configuration)
    return {
        /**
         * Creates a new context.
         * @summary Create a new context
         * @param {ContextApiCreateNewContextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewContext(requestParameters: ContextApiCreateNewContextRequest, options?: AxiosRequestConfig): AxiosPromise<ContextCreateNewContextResponse> {
            return localVarFp.createNewContext(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * [__EXPERIMENTAL__] Creates project restriction on a context.
         * @summary ðŸ§ª Create context restriction
         * @param {ContextApiCreateRestrictionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRestriction(requestParameters: ContextApiCreateRestrictionRequest, options?: AxiosRequestConfig): AxiosPromise<RestrictionCreated> {
            return localVarFp.createRestriction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * [__EXPERIMENTAL__] Deletes a project restriction on a context.
         * @summary ðŸ§ª Delete context restriction
         * @param {ContextApiDeleteRestrictionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestriction(requestParameters: ContextApiDeleteRestrictionRequest, options?: AxiosRequestConfig): AxiosPromise<RestrictionDeleted> {
            return localVarFp.deleteRestriction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns basic information about a context.
         * @summary Get a context
         * @param {ContextApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation(requestParameters: ContextApiGetInformationRequest, options?: AxiosRequestConfig): AxiosPromise<ContextGetInformationResponse> {
            return localVarFp.getInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * [__EXPERIMENTAL__] Gets a list of project restrictions associated with a context.
         * @summary ðŸ§ª Get context restrictions
         * @param {ContextApiGetRestrictionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestrictions(requestParameters: ContextApiGetRestrictionsRequest, options?: AxiosRequestConfig): AxiosPromise<ContextProjectRestrictionsList> {
            return localVarFp.getRestrictions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List information about environment variables in a context, not including their values.
         * @summary List environment variables
         * @param {ContextApiListEnvironmentVariablesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironmentVariables(requestParameters: ContextApiListEnvironmentVariablesRequest, options?: AxiosRequestConfig): AxiosPromise<ContextListEnvironmentVariablesResponse> {
            return localVarFp.listEnvironmentVariables(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all contexts for an owner.
         * @summary List contexts
         * @param {ContextApiListOwnerContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOwnerContexts(requestParameters: ContextApiListOwnerContextsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ContextListOwnerContextsResponse> {
            return localVarFp.listOwnerContexts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a context
         * @param {ContextApiRemoveContextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeContext(requestParameters: ContextApiRemoveContextRequest, options?: AxiosRequestConfig): AxiosPromise<ContextRemoveContextResponse> {
            return localVarFp.removeContext(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an environment variable from a context.
         * @summary Remove an environment variable
         * @param {ContextApiRemoveEnvironmentVariableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEnvironmentVariable(requestParameters: ContextApiRemoveEnvironmentVariableRequest, options?: AxiosRequestConfig): AxiosPromise<ContextRemoveEnvironmentVariableResponse> {
            return localVarFp.removeEnvironmentVariable(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create or update an environment variable within a context. Returns information about the environment variable, not including its value.
         * @summary Add or update an environment variable
         * @param {ContextApiUpdateEnvironmentVariableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentVariable(requestParameters: ContextApiUpdateEnvironmentVariableRequest, options?: AxiosRequestConfig): AxiosPromise<ContextUpdateEnvironmentVariableResponse> {
            return localVarFp.updateEnvironmentVariable(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewContext operation in ContextApi.
 * @export
 * @interface ContextApiCreateNewContextRequest
 */
export type ContextApiCreateNewContextRequest = {
    
} & ContextCreateNewContextRequest

/**
 * Request parameters for createRestriction operation in ContextApi.
 * @export
 * @interface ContextApiCreateRestrictionRequest
 */
export type ContextApiCreateRestrictionRequest = {
    
    /**
    * An opaque identifier of a context.
    * @type {string}
    * @memberof ContextApiCreateRestriction
    */
    readonly contextId: string
    
} & ContextCreateRestrictionRequest

/**
 * Request parameters for deleteRestriction operation in ContextApi.
 * @export
 * @interface ContextApiDeleteRestrictionRequest
 */
export type ContextApiDeleteRestrictionRequest = {
    
    /**
    * An opaque identifier of a context.
    * @type {string}
    * @memberof ContextApiDeleteRestriction
    */
    readonly contextId: string
    
    /**
    * An opaque identifier of a context restriction.
    * @type {string}
    * @memberof ContextApiDeleteRestriction
    */
    readonly restrictionId: string
    
}

/**
 * Request parameters for getInformation operation in ContextApi.
 * @export
 * @interface ContextApiGetInformationRequest
 */
export type ContextApiGetInformationRequest = {
    
    /**
    * ID of the context (UUID)
    * @type {string}
    * @memberof ContextApiGetInformation
    */
    readonly contextId: string
    
}

/**
 * Request parameters for getRestrictions operation in ContextApi.
 * @export
 * @interface ContextApiGetRestrictionsRequest
 */
export type ContextApiGetRestrictionsRequest = {
    
    /**
    * An opaque identifier of a context.
    * @type {string}
    * @memberof ContextApiGetRestrictions
    */
    readonly contextId: string
    
}

/**
 * Request parameters for listEnvironmentVariables operation in ContextApi.
 * @export
 * @interface ContextApiListEnvironmentVariablesRequest
 */
export type ContextApiListEnvironmentVariablesRequest = {
    
    /**
    * ID of the context (UUID)
    * @type {string}
    * @memberof ContextApiListEnvironmentVariables
    */
    readonly contextId: string
    
    /**
    * A token to retrieve the next page of results.
    * @type {string}
    * @memberof ContextApiListEnvironmentVariables
    */
    readonly pageToken?: string
    
}

/**
 * Request parameters for listOwnerContexts operation in ContextApi.
 * @export
 * @interface ContextApiListOwnerContextsRequest
 */
export type ContextApiListOwnerContextsRequest = {
    
    /**
    * The unique ID of the owner of the context. Specify either this or owner-slug.
    * @type {string}
    * @memberof ContextApiListOwnerContexts
    */
    readonly ownerId?: string
    
    /**
    * A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts.
    * @type {string}
    * @memberof ContextApiListOwnerContexts
    */
    readonly ownerSlug?: string
    
    /**
    * The type of the owner. Defaults to \"organization\". Accounts are only used as context owners in server.
    * @type {'account' | 'organization'}
    * @memberof ContextApiListOwnerContexts
    */
    readonly ownerType?: 'account' | 'organization'
    
    /**
    * A token to retrieve the next page of results.
    * @type {string}
    * @memberof ContextApiListOwnerContexts
    */
    readonly pageToken?: string
    
}

/**
 * Request parameters for removeContext operation in ContextApi.
 * @export
 * @interface ContextApiRemoveContextRequest
 */
export type ContextApiRemoveContextRequest = {
    
    /**
    * ID of the context (UUID)
    * @type {string}
    * @memberof ContextApiRemoveContext
    */
    readonly contextId: string
    
}

/**
 * Request parameters for removeEnvironmentVariable operation in ContextApi.
 * @export
 * @interface ContextApiRemoveEnvironmentVariableRequest
 */
export type ContextApiRemoveEnvironmentVariableRequest = {
    
    /**
    * The name of the environment variable
    * @type {string}
    * @memberof ContextApiRemoveEnvironmentVariable
    */
    readonly envVarName: string
    
    /**
    * ID of the context (UUID)
    * @type {string}
    * @memberof ContextApiRemoveEnvironmentVariable
    */
    readonly contextId: string
    
}

/**
 * Request parameters for updateEnvironmentVariable operation in ContextApi.
 * @export
 * @interface ContextApiUpdateEnvironmentVariableRequest
 */
export type ContextApiUpdateEnvironmentVariableRequest = {
    
    /**
    * ID of the context (UUID)
    * @type {string}
    * @memberof ContextApiUpdateEnvironmentVariable
    */
    readonly contextId: string
    
    /**
    * The name of the environment variable
    * @type {string}
    * @memberof ContextApiUpdateEnvironmentVariable
    */
    readonly envVarName: string
    
} & ContextUpdateEnvironmentVariableRequest

/**
 * ContextApiGenerated - object-oriented interface
 * @export
 * @class ContextApiGenerated
 * @extends {BaseAPI}
 */
export class ContextApiGenerated extends BaseAPI {
    /**
     * Creates a new context.
     * @summary Create a new context
     * @param {ContextApiCreateNewContextRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApiGenerated
     */
    public createNewContext(requestParameters: ContextApiCreateNewContextRequest, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).createNewContext(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [__EXPERIMENTAL__] Creates project restriction on a context.
     * @summary ðŸ§ª Create context restriction
     * @param {ContextApiCreateRestrictionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApiGenerated
     */
    public createRestriction(requestParameters: ContextApiCreateRestrictionRequest, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).createRestriction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [__EXPERIMENTAL__] Deletes a project restriction on a context.
     * @summary ðŸ§ª Delete context restriction
     * @param {ContextApiDeleteRestrictionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApiGenerated
     */
    public deleteRestriction(requestParameters: ContextApiDeleteRestrictionRequest, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).deleteRestriction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns basic information about a context.
     * @summary Get a context
     * @param {ContextApiGetInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApiGenerated
     */
    public getInformation(requestParameters: ContextApiGetInformationRequest, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).getInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [__EXPERIMENTAL__] Gets a list of project restrictions associated with a context.
     * @summary ðŸ§ª Get context restrictions
     * @param {ContextApiGetRestrictionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApiGenerated
     */
    public getRestrictions(requestParameters: ContextApiGetRestrictionsRequest, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).getRestrictions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List information about environment variables in a context, not including their values.
     * @summary List environment variables
     * @param {ContextApiListEnvironmentVariablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApiGenerated
     */
    public listEnvironmentVariables(requestParameters: ContextApiListEnvironmentVariablesRequest, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).listEnvironmentVariables(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all contexts for an owner.
     * @summary List contexts
     * @param {ContextApiListOwnerContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApiGenerated
     */
    public listOwnerContexts(requestParameters: ContextApiListOwnerContextsRequest = {}, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).listOwnerContexts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a context
     * @param {ContextApiRemoveContextRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApiGenerated
     */
    public removeContext(requestParameters: ContextApiRemoveContextRequest, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).removeContext(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an environment variable from a context.
     * @summary Remove an environment variable
     * @param {ContextApiRemoveEnvironmentVariableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApiGenerated
     */
    public removeEnvironmentVariable(requestParameters: ContextApiRemoveEnvironmentVariableRequest, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).removeEnvironmentVariable(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create or update an environment variable within a context. Returns information about the environment variable, not including its value.
     * @summary Add or update an environment variable
     * @param {ContextApiUpdateEnvironmentVariableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApiGenerated
     */
    public updateEnvironmentVariable(requestParameters: ContextApiUpdateEnvironmentVariableRequest, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).updateEnvironmentVariable(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
