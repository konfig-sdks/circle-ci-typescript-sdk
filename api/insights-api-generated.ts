/* tslint:disable */
/* eslint-disable */
/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

The version of the OpenAPI document: v2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InsightsGetFlakyTestsResponse } from '../models';
// @ts-ignore
import { InsightsGetFlakyTestsdefaultResponse } from '../models';
// @ts-ignore
import { InsightsGetJobTimeseriesDataResponse } from '../models';
// @ts-ignore
import { InsightsGetJobTimeseriesDatadefaultResponse } from '../models';
// @ts-ignore
import { InsightsGetProjectSummaryMetricsResponse } from '../models';
// @ts-ignore
import { InsightsGetProjectSummaryMetricsdefaultResponse } from '../models';
// @ts-ignore
import { InsightsGetProjectWorkflowJobMetricsResponse } from '../models';
// @ts-ignore
import { InsightsGetProjectWorkflowJobMetricsdefaultResponse } from '../models';
// @ts-ignore
import { InsightsGetProjectWorkflowMetricsResponse } from '../models';
// @ts-ignore
import { InsightsGetProjectWorkflowMetricsdefaultResponse } from '../models';
// @ts-ignore
import { InsightsGetProjectWorkflowTestMetricsResponse } from '../models';
// @ts-ignore
import { InsightsGetProjectWorkflowTestMetricsdefaultResponse } from '../models';
// @ts-ignore
import { InsightsGetRecentWorkflowRunsResponse } from '../models';
// @ts-ignore
import { InsightsGetRecentWorkflowRunsdefaultResponse } from '../models';
// @ts-ignore
import { InsightsGetSummaryMetricsWithTrendsResponse } from '../models';
// @ts-ignore
import { InsightsGetSummaryMetricsWithTrendsdefaultResponse } from '../models';
// @ts-ignore
import { InsightsGetWorkflowSummaryMetricsResponse } from '../models';
// @ts-ignore
import { InsightsGetWorkflowSummaryMetricsdefaultResponse } from '../models';
// @ts-ignore
import { InsightsListProjectBranchesResponse } from '../models';
// @ts-ignore
import { InsightsListProjectBranchesdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InsightsApi - axios parameter creator
 * @export
 */
export const InsightsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of flaky tests for a given project. Flaky tests are branch agnostic.              A flaky test is a test that passed and failed in the same commit.
         * @summary Get flaky tests for a project
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlakyTests: async (projectSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getFlakyTests', 'projectSlug', projectSlug)
            const localVarPath = `/insights/{project-slug}/flaky-tests`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/insights/{project-slug}/flaky-tests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get timeseries data for all jobs within a workflow. Hourly granularity data is only retained for 48 hours while daily granularity data is retained for 90 days.
         * @summary Job timeseries data
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} workflowName The name of the workflow.
         * @param {string} [branch] The name of a vcs branch. If not passed we will scope the API call to the default branch.
         * @param {'daily' | 'hourly'} [granularity] The granularity for which to query timeseries data.
         * @param {string} [startDate] Include only executions that started at or after this date. This must be specified if an end-date is provided.
         * @param {string} [endDate] Include only executions that started before this date. This date can be at most 90 days after the start-date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobTimeseriesData: async (projectSlug: string, workflowName: string, branch?: string, granularity?: 'daily' | 'hourly', startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getJobTimeseriesData', 'projectSlug', projectSlug)
            // verify required parameter 'workflowName' is not null or undefined
            assertParamExists('getJobTimeseriesData', 'workflowName', workflowName)
            const localVarPath = `/insights/time-series/{project-slug}/workflows/{workflow-name}/jobs`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)))
                .replace(`{${"workflow-name"}}`, encodeURIComponent(String(workflowName !== undefined ? workflowName : `-workflow-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (branch !== undefined) {
                localVarQueryParameter['branch'] = branch;
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start-date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end-date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/insights/time-series/{project-slug}/workflows/{workflow-name}/jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get summary metrics and trends for a project at workflow and branch level.              Workflow runs going back at most 90 days are included in the aggregation window.              Trends are only supported upto last 30 days.              Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
         * @summary Get summary metrics and trends for a project across it\'s workflows and branches
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days'} [reportingWindow] The time window used to calculate summary metrics. If not provided, defaults to last-90-days
         * @param {object} [branches] The names of VCS branches to include in branch-level workflow metrics.
         * @param {object} [workflowNames] The names of workflows to include in workflow-level metrics.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSummaryMetrics: async (projectSlug: string, reportingWindow?: 'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days', branches?: object, workflowNames?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getProjectSummaryMetrics', 'projectSlug', projectSlug)
            const localVarPath = `/insights/pages/{project-slug}/summary`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (reportingWindow !== undefined) {
                localVarQueryParameter['reporting-window'] = reportingWindow;
            }

            if (branches !== undefined) {
                localVarQueryParameter['branches'] = branches;
            }

            if (workflowNames !== undefined) {
                localVarQueryParameter['workflow-names'] = workflowNames;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/insights/pages/{project-slug}/summary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get summary metrics for a project workflow\'s jobs. Job runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
         * @summary Get summary metrics for a project workflow\'s jobs.
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} workflowName The name of the workflow.
         * @param {string} [pageToken] A token to retrieve the next page of results.
         * @param {boolean} [allBranches] Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
         * @param {string} [branch] The name of a vcs branch. If not passed we will scope the API call to the default branch.
         * @param {'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days'} [reportingWindow] The time window used to calculate summary metrics. If not provided, defaults to last-90-days
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectWorkflowJobMetrics: async (projectSlug: string, workflowName: string, pageToken?: string, allBranches?: boolean, branch?: string, reportingWindow?: 'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getProjectWorkflowJobMetrics', 'projectSlug', projectSlug)
            // verify required parameter 'workflowName' is not null or undefined
            assertParamExists('getProjectWorkflowJobMetrics', 'workflowName', workflowName)
            const localVarPath = `/insights/{project-slug}/workflows/{workflow-name}/jobs`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)))
                .replace(`{${"workflow-name"}}`, encodeURIComponent(String(workflowName !== undefined ? workflowName : `-workflow-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (pageToken !== undefined) {
                localVarQueryParameter['page-token'] = pageToken;
            }

            if (allBranches !== undefined) {
                localVarQueryParameter['all-branches'] = allBranches;
            }

            if (branch !== undefined) {
                localVarQueryParameter['branch'] = branch;
            }

            if (reportingWindow !== undefined) {
                localVarQueryParameter['reporting-window'] = reportingWindow;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/insights/{project-slug}/workflows/{workflow-name}/jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get summary metrics for a project\'s workflows.  Workflow runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours.  Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
         * @summary Get summary metrics for a project\'s workflows
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} [pageToken] A token to retrieve the next page of results.
         * @param {boolean} [allBranches] Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
         * @param {string} [branch] The name of a vcs branch. If not passed we will scope the API call to the default branch.
         * @param {'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days'} [reportingWindow] The time window used to calculate summary metrics. If not provided, defaults to last-90-days
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectWorkflowMetrics: async (projectSlug: string, pageToken?: string, allBranches?: boolean, branch?: string, reportingWindow?: 'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getProjectWorkflowMetrics', 'projectSlug', projectSlug)
            const localVarPath = `/insights/{project-slug}/workflows`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (pageToken !== undefined) {
                localVarQueryParameter['page-token'] = pageToken;
            }

            if (allBranches !== undefined) {
                localVarQueryParameter['all-branches'] = allBranches;
            }

            if (branch !== undefined) {
                localVarQueryParameter['branch'] = branch;
            }

            if (reportingWindow !== undefined) {
                localVarQueryParameter['reporting-window'] = reportingWindow;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/insights/{project-slug}/workflows',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get test metrics for a project\'s workflows. Currently tests metrics are calculated based on 10 most recent workflow runs.
         * @summary Get test metrics for a project\'s workflows
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} workflowName The name of the workflow.
         * @param {string} [branch] The name of a vcs branch. If not passed we will scope the API call to the default branch.
         * @param {boolean} [allBranches] Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectWorkflowTestMetrics: async (projectSlug: string, workflowName: string, branch?: string, allBranches?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getProjectWorkflowTestMetrics', 'projectSlug', projectSlug)
            // verify required parameter 'workflowName' is not null or undefined
            assertParamExists('getProjectWorkflowTestMetrics', 'workflowName', workflowName)
            const localVarPath = `/insights/{project-slug}/workflows/{workflow-name}/test-metrics`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)))
                .replace(`{${"workflow-name"}}`, encodeURIComponent(String(workflowName !== undefined ? workflowName : `-workflow-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (branch !== undefined) {
                localVarQueryParameter['branch'] = branch;
            }

            if (allBranches !== undefined) {
                localVarQueryParameter['all-branches'] = allBranches;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/insights/{project-slug}/workflows/{workflow-name}/test-metrics',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get recent runs of a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
         * @summary Get recent runs of a workflow
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} workflowName The name of the workflow.
         * @param {boolean} [allBranches] Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
         * @param {string} [branch] The name of a vcs branch. If not passed we will scope the API call to the default branch.
         * @param {string} [pageToken] A token to retrieve the next page of results.
         * @param {string} [startDate] Include only executions that started at or after this date. This must be specified if an end-date is provided.
         * @param {string} [endDate] Include only executions that started before this date. This date can be at most 90 days after the start-date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentWorkflowRuns: async (projectSlug: string, workflowName: string, allBranches?: boolean, branch?: string, pageToken?: string, startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getRecentWorkflowRuns', 'projectSlug', projectSlug)
            // verify required parameter 'workflowName' is not null or undefined
            assertParamExists('getRecentWorkflowRuns', 'workflowName', workflowName)
            const localVarPath = `/insights/{project-slug}/workflows/{workflow-name}`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)))
                .replace(`{${"workflow-name"}}`, encodeURIComponent(String(workflowName !== undefined ? workflowName : `-workflow-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (allBranches !== undefined) {
                localVarQueryParameter['all-branches'] = allBranches;
            }

            if (branch !== undefined) {
                localVarQueryParameter['branch'] = branch;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page-token'] = pageToken;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start-date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end-date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/insights/{project-slug}/workflows/{workflow-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets aggregated summary metrics with trends for the entire org.               Also gets aggregated metrics and trends for each project belonging to the org.
         * @summary Get summary metrics with trends for the entire org, and for each project.
         * @param {string} orgSlug Org slug in the form &#x60;vcs-slug/org-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
         * @param {'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days'} [reportingWindow] The time window used to calculate summary metrics. If not provided, defaults to last-90-days
         * @param {object} [projectNames] List of project names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaryMetricsWithTrends: async (orgSlug: string, reportingWindow?: 'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days', projectNames?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgSlug' is not null or undefined
            assertParamExists('getSummaryMetricsWithTrends', 'orgSlug', orgSlug)
            const localVarPath = `/insights/{org-slug}/summary`
                .replace(`{${"org-slug"}}`, encodeURIComponent(String(orgSlug !== undefined ? orgSlug : `-org-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (reportingWindow !== undefined) {
                localVarQueryParameter['reporting-window'] = reportingWindow;
            }

            if (projectNames !== undefined) {
                localVarQueryParameter['project-names'] = projectNames;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/insights/{org-slug}/summary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the metrics and trends for a particular workflow on a single branch or all branches
         * @summary Get metrics and trends for workflows
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} workflowName The name of the workflow.
         * @param {boolean} [allBranches] Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
         * @param {string} [branch] The name of a vcs branch. If not passed we will scope the API call to the default branch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowSummaryMetrics: async (projectSlug: string, workflowName: string, allBranches?: boolean, branch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getWorkflowSummaryMetrics', 'projectSlug', projectSlug)
            // verify required parameter 'workflowName' is not null or undefined
            assertParamExists('getWorkflowSummaryMetrics', 'workflowName', workflowName)
            const localVarPath = `/insights/{project-slug}/workflows/{workflow-name}/summary`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)))
                .replace(`{${"workflow-name"}}`, encodeURIComponent(String(workflowName !== undefined ? workflowName : `-workflow-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (allBranches !== undefined) {
                localVarQueryParameter['all-branches'] = allBranches;
            }

            if (branch !== undefined) {
                localVarQueryParameter['branch'] = branch;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/insights/{project-slug}/workflows/{workflow-name}/summary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all branches for a specified project. The list will only contain branches currently available within Insights. The maximum number of branches returned by this endpoint is 5,000.
         * @summary Get all branches for a project
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} [workflowName] The name of a workflow. If not passed we will scope the API call to the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectBranches: async (projectSlug: string, workflowName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('listProjectBranches', 'projectSlug', projectSlug)
            const localVarPath = `/insights/{project-slug}/branches`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (workflowName !== undefined) {
                localVarQueryParameter['workflow-name'] = workflowName;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/insights/{project-slug}/branches',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InsightsApi - functional programming interface
 * @export
 */
export const InsightsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InsightsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of flaky tests for a given project. Flaky tests are branch agnostic.              A flaky test is a test that passed and failed in the same commit.
         * @summary Get flaky tests for a project
         * @param {InsightsApiGetFlakyTestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlakyTests(requestParameters: InsightsApiGetFlakyTestsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightsGetFlakyTestsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFlakyTests(requestParameters.projectSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get timeseries data for all jobs within a workflow. Hourly granularity data is only retained for 48 hours while daily granularity data is retained for 90 days.
         * @summary Job timeseries data
         * @param {InsightsApiGetJobTimeseriesDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobTimeseriesData(requestParameters: InsightsApiGetJobTimeseriesDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightsGetJobTimeseriesDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobTimeseriesData(requestParameters.projectSlug, requestParameters.workflowName, requestParameters.branch, requestParameters.granularity, requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get summary metrics and trends for a project at workflow and branch level.              Workflow runs going back at most 90 days are included in the aggregation window.              Trends are only supported upto last 30 days.              Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
         * @summary Get summary metrics and trends for a project across it\'s workflows and branches
         * @param {InsightsApiGetProjectSummaryMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSummaryMetrics(requestParameters: InsightsApiGetProjectSummaryMetricsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightsGetProjectSummaryMetricsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectSummaryMetrics(requestParameters.projectSlug, requestParameters.reportingWindow, requestParameters.branches, requestParameters.workflowNames, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get summary metrics for a project workflow\'s jobs. Job runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
         * @summary Get summary metrics for a project workflow\'s jobs.
         * @param {InsightsApiGetProjectWorkflowJobMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectWorkflowJobMetrics(requestParameters: InsightsApiGetProjectWorkflowJobMetricsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightsGetProjectWorkflowJobMetricsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectWorkflowJobMetrics(requestParameters.projectSlug, requestParameters.workflowName, requestParameters.pageToken, requestParameters.allBranches, requestParameters.branch, requestParameters.reportingWindow, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get summary metrics for a project\'s workflows.  Workflow runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours.  Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
         * @summary Get summary metrics for a project\'s workflows
         * @param {InsightsApiGetProjectWorkflowMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectWorkflowMetrics(requestParameters: InsightsApiGetProjectWorkflowMetricsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightsGetProjectWorkflowMetricsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectWorkflowMetrics(requestParameters.projectSlug, requestParameters.pageToken, requestParameters.allBranches, requestParameters.branch, requestParameters.reportingWindow, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get test metrics for a project\'s workflows. Currently tests metrics are calculated based on 10 most recent workflow runs.
         * @summary Get test metrics for a project\'s workflows
         * @param {InsightsApiGetProjectWorkflowTestMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectWorkflowTestMetrics(requestParameters: InsightsApiGetProjectWorkflowTestMetricsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightsGetProjectWorkflowTestMetricsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectWorkflowTestMetrics(requestParameters.projectSlug, requestParameters.workflowName, requestParameters.branch, requestParameters.allBranches, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get recent runs of a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
         * @summary Get recent runs of a workflow
         * @param {InsightsApiGetRecentWorkflowRunsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecentWorkflowRuns(requestParameters: InsightsApiGetRecentWorkflowRunsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightsGetRecentWorkflowRunsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecentWorkflowRuns(requestParameters.projectSlug, requestParameters.workflowName, requestParameters.allBranches, requestParameters.branch, requestParameters.pageToken, requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets aggregated summary metrics with trends for the entire org.               Also gets aggregated metrics and trends for each project belonging to the org.
         * @summary Get summary metrics with trends for the entire org, and for each project.
         * @param {InsightsApiGetSummaryMetricsWithTrendsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSummaryMetricsWithTrends(requestParameters: InsightsApiGetSummaryMetricsWithTrendsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightsGetSummaryMetricsWithTrendsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSummaryMetricsWithTrends(requestParameters.orgSlug, requestParameters.reportingWindow, requestParameters.projectNames, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the metrics and trends for a particular workflow on a single branch or all branches
         * @summary Get metrics and trends for workflows
         * @param {InsightsApiGetWorkflowSummaryMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflowSummaryMetrics(requestParameters: InsightsApiGetWorkflowSummaryMetricsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightsGetWorkflowSummaryMetricsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowSummaryMetrics(requestParameters.projectSlug, requestParameters.workflowName, requestParameters.allBranches, requestParameters.branch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all branches for a specified project. The list will only contain branches currently available within Insights. The maximum number of branches returned by this endpoint is 5,000.
         * @summary Get all branches for a project
         * @param {InsightsApiListProjectBranchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjectBranches(requestParameters: InsightsApiListProjectBranchesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightsListProjectBranchesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjectBranches(requestParameters.projectSlug, requestParameters.workflowName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InsightsApi - factory interface
 * @export
 */
export const InsightsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InsightsApiFp(configuration)
    return {
        /**
         * Get a list of flaky tests for a given project. Flaky tests are branch agnostic.              A flaky test is a test that passed and failed in the same commit.
         * @summary Get flaky tests for a project
         * @param {InsightsApiGetFlakyTestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlakyTests(requestParameters: InsightsApiGetFlakyTestsRequest, options?: AxiosRequestConfig): AxiosPromise<InsightsGetFlakyTestsResponse> {
            return localVarFp.getFlakyTests(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get timeseries data for all jobs within a workflow. Hourly granularity data is only retained for 48 hours while daily granularity data is retained for 90 days.
         * @summary Job timeseries data
         * @param {InsightsApiGetJobTimeseriesDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobTimeseriesData(requestParameters: InsightsApiGetJobTimeseriesDataRequest, options?: AxiosRequestConfig): AxiosPromise<InsightsGetJobTimeseriesDataResponse> {
            return localVarFp.getJobTimeseriesData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get summary metrics and trends for a project at workflow and branch level.              Workflow runs going back at most 90 days are included in the aggregation window.              Trends are only supported upto last 30 days.              Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
         * @summary Get summary metrics and trends for a project across it\'s workflows and branches
         * @param {InsightsApiGetProjectSummaryMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSummaryMetrics(requestParameters: InsightsApiGetProjectSummaryMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<InsightsGetProjectSummaryMetricsResponse> {
            return localVarFp.getProjectSummaryMetrics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get summary metrics for a project workflow\'s jobs. Job runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
         * @summary Get summary metrics for a project workflow\'s jobs.
         * @param {InsightsApiGetProjectWorkflowJobMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectWorkflowJobMetrics(requestParameters: InsightsApiGetProjectWorkflowJobMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<InsightsGetProjectWorkflowJobMetricsResponse> {
            return localVarFp.getProjectWorkflowJobMetrics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get summary metrics for a project\'s workflows.  Workflow runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours.  Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
         * @summary Get summary metrics for a project\'s workflows
         * @param {InsightsApiGetProjectWorkflowMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectWorkflowMetrics(requestParameters: InsightsApiGetProjectWorkflowMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<InsightsGetProjectWorkflowMetricsResponse> {
            return localVarFp.getProjectWorkflowMetrics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get test metrics for a project\'s workflows. Currently tests metrics are calculated based on 10 most recent workflow runs.
         * @summary Get test metrics for a project\'s workflows
         * @param {InsightsApiGetProjectWorkflowTestMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectWorkflowTestMetrics(requestParameters: InsightsApiGetProjectWorkflowTestMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<InsightsGetProjectWorkflowTestMetricsResponse> {
            return localVarFp.getProjectWorkflowTestMetrics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get recent runs of a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
         * @summary Get recent runs of a workflow
         * @param {InsightsApiGetRecentWorkflowRunsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentWorkflowRuns(requestParameters: InsightsApiGetRecentWorkflowRunsRequest, options?: AxiosRequestConfig): AxiosPromise<InsightsGetRecentWorkflowRunsResponse> {
            return localVarFp.getRecentWorkflowRuns(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets aggregated summary metrics with trends for the entire org.               Also gets aggregated metrics and trends for each project belonging to the org.
         * @summary Get summary metrics with trends for the entire org, and for each project.
         * @param {InsightsApiGetSummaryMetricsWithTrendsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaryMetricsWithTrends(requestParameters: InsightsApiGetSummaryMetricsWithTrendsRequest, options?: AxiosRequestConfig): AxiosPromise<InsightsGetSummaryMetricsWithTrendsResponse> {
            return localVarFp.getSummaryMetricsWithTrends(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the metrics and trends for a particular workflow on a single branch or all branches
         * @summary Get metrics and trends for workflows
         * @param {InsightsApiGetWorkflowSummaryMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowSummaryMetrics(requestParameters: InsightsApiGetWorkflowSummaryMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<InsightsGetWorkflowSummaryMetricsResponse> {
            return localVarFp.getWorkflowSummaryMetrics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all branches for a specified project. The list will only contain branches currently available within Insights. The maximum number of branches returned by this endpoint is 5,000.
         * @summary Get all branches for a project
         * @param {InsightsApiListProjectBranchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectBranches(requestParameters: InsightsApiListProjectBranchesRequest, options?: AxiosRequestConfig): AxiosPromise<InsightsListProjectBranchesResponse> {
            return localVarFp.listProjectBranches(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getFlakyTests operation in InsightsApi.
 * @export
 * @interface InsightsApiGetFlakyTestsRequest
 */
export type InsightsApiGetFlakyTestsRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof InsightsApiGetFlakyTests
    */
    readonly projectSlug: string
    
}

/**
 * Request parameters for getJobTimeseriesData operation in InsightsApi.
 * @export
 * @interface InsightsApiGetJobTimeseriesDataRequest
 */
export type InsightsApiGetJobTimeseriesDataRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof InsightsApiGetJobTimeseriesData
    */
    readonly projectSlug: string
    
    /**
    * The name of the workflow.
    * @type {string}
    * @memberof InsightsApiGetJobTimeseriesData
    */
    readonly workflowName: string
    
    /**
    * The name of a vcs branch. If not passed we will scope the API call to the default branch.
    * @type {string}
    * @memberof InsightsApiGetJobTimeseriesData
    */
    readonly branch?: string
    
    /**
    * The granularity for which to query timeseries data.
    * @type {'daily' | 'hourly'}
    * @memberof InsightsApiGetJobTimeseriesData
    */
    readonly granularity?: 'daily' | 'hourly'
    
    /**
    * Include only executions that started at or after this date. This must be specified if an end-date is provided.
    * @type {string}
    * @memberof InsightsApiGetJobTimeseriesData
    */
    readonly startDate?: string
    
    /**
    * Include only executions that started before this date. This date can be at most 90 days after the start-date.
    * @type {string}
    * @memberof InsightsApiGetJobTimeseriesData
    */
    readonly endDate?: string
    
}

/**
 * Request parameters for getProjectSummaryMetrics operation in InsightsApi.
 * @export
 * @interface InsightsApiGetProjectSummaryMetricsRequest
 */
export type InsightsApiGetProjectSummaryMetricsRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof InsightsApiGetProjectSummaryMetrics
    */
    readonly projectSlug: string
    
    /**
    * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
    * @type {'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days'}
    * @memberof InsightsApiGetProjectSummaryMetrics
    */
    readonly reportingWindow?: 'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days'
    
    /**
    * The names of VCS branches to include in branch-level workflow metrics.
    * @type {object}
    * @memberof InsightsApiGetProjectSummaryMetrics
    */
    readonly branches?: object
    
    /**
    * The names of workflows to include in workflow-level metrics.
    * @type {object}
    * @memberof InsightsApiGetProjectSummaryMetrics
    */
    readonly workflowNames?: object
    
}

/**
 * Request parameters for getProjectWorkflowJobMetrics operation in InsightsApi.
 * @export
 * @interface InsightsApiGetProjectWorkflowJobMetricsRequest
 */
export type InsightsApiGetProjectWorkflowJobMetricsRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof InsightsApiGetProjectWorkflowJobMetrics
    */
    readonly projectSlug: string
    
    /**
    * The name of the workflow.
    * @type {string}
    * @memberof InsightsApiGetProjectWorkflowJobMetrics
    */
    readonly workflowName: string
    
    /**
    * A token to retrieve the next page of results.
    * @type {string}
    * @memberof InsightsApiGetProjectWorkflowJobMetrics
    */
    readonly pageToken?: string
    
    /**
    * Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
    * @type {boolean}
    * @memberof InsightsApiGetProjectWorkflowJobMetrics
    */
    readonly allBranches?: boolean
    
    /**
    * The name of a vcs branch. If not passed we will scope the API call to the default branch.
    * @type {string}
    * @memberof InsightsApiGetProjectWorkflowJobMetrics
    */
    readonly branch?: string
    
    /**
    * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
    * @type {'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days'}
    * @memberof InsightsApiGetProjectWorkflowJobMetrics
    */
    readonly reportingWindow?: 'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days'
    
}

/**
 * Request parameters for getProjectWorkflowMetrics operation in InsightsApi.
 * @export
 * @interface InsightsApiGetProjectWorkflowMetricsRequest
 */
export type InsightsApiGetProjectWorkflowMetricsRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof InsightsApiGetProjectWorkflowMetrics
    */
    readonly projectSlug: string
    
    /**
    * A token to retrieve the next page of results.
    * @type {string}
    * @memberof InsightsApiGetProjectWorkflowMetrics
    */
    readonly pageToken?: string
    
    /**
    * Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
    * @type {boolean}
    * @memberof InsightsApiGetProjectWorkflowMetrics
    */
    readonly allBranches?: boolean
    
    /**
    * The name of a vcs branch. If not passed we will scope the API call to the default branch.
    * @type {string}
    * @memberof InsightsApiGetProjectWorkflowMetrics
    */
    readonly branch?: string
    
    /**
    * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
    * @type {'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days'}
    * @memberof InsightsApiGetProjectWorkflowMetrics
    */
    readonly reportingWindow?: 'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days'
    
}

/**
 * Request parameters for getProjectWorkflowTestMetrics operation in InsightsApi.
 * @export
 * @interface InsightsApiGetProjectWorkflowTestMetricsRequest
 */
export type InsightsApiGetProjectWorkflowTestMetricsRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof InsightsApiGetProjectWorkflowTestMetrics
    */
    readonly projectSlug: string
    
    /**
    * The name of the workflow.
    * @type {string}
    * @memberof InsightsApiGetProjectWorkflowTestMetrics
    */
    readonly workflowName: string
    
    /**
    * The name of a vcs branch. If not passed we will scope the API call to the default branch.
    * @type {string}
    * @memberof InsightsApiGetProjectWorkflowTestMetrics
    */
    readonly branch?: string
    
    /**
    * Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
    * @type {boolean}
    * @memberof InsightsApiGetProjectWorkflowTestMetrics
    */
    readonly allBranches?: boolean
    
}

/**
 * Request parameters for getRecentWorkflowRuns operation in InsightsApi.
 * @export
 * @interface InsightsApiGetRecentWorkflowRunsRequest
 */
export type InsightsApiGetRecentWorkflowRunsRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof InsightsApiGetRecentWorkflowRuns
    */
    readonly projectSlug: string
    
    /**
    * The name of the workflow.
    * @type {string}
    * @memberof InsightsApiGetRecentWorkflowRuns
    */
    readonly workflowName: string
    
    /**
    * Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
    * @type {boolean}
    * @memberof InsightsApiGetRecentWorkflowRuns
    */
    readonly allBranches?: boolean
    
    /**
    * The name of a vcs branch. If not passed we will scope the API call to the default branch.
    * @type {string}
    * @memberof InsightsApiGetRecentWorkflowRuns
    */
    readonly branch?: string
    
    /**
    * A token to retrieve the next page of results.
    * @type {string}
    * @memberof InsightsApiGetRecentWorkflowRuns
    */
    readonly pageToken?: string
    
    /**
    * Include only executions that started at or after this date. This must be specified if an end-date is provided.
    * @type {string}
    * @memberof InsightsApiGetRecentWorkflowRuns
    */
    readonly startDate?: string
    
    /**
    * Include only executions that started before this date. This date can be at most 90 days after the start-date.
    * @type {string}
    * @memberof InsightsApiGetRecentWorkflowRuns
    */
    readonly endDate?: string
    
}

/**
 * Request parameters for getSummaryMetricsWithTrends operation in InsightsApi.
 * @export
 * @interface InsightsApiGetSummaryMetricsWithTrendsRequest
 */
export type InsightsApiGetSummaryMetricsWithTrendsRequest = {
    
    /**
    * Org slug in the form `vcs-slug/org-name`. The `/` characters may be URL-escaped.
    * @type {string}
    * @memberof InsightsApiGetSummaryMetricsWithTrends
    */
    readonly orgSlug: string
    
    /**
    * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
    * @type {'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days'}
    * @memberof InsightsApiGetSummaryMetricsWithTrends
    */
    readonly reportingWindow?: 'last-7-days' | 'last-90-days' | 'last-24-hours' | 'last-30-days' | 'last-60-days'
    
    /**
    * List of project names.
    * @type {object}
    * @memberof InsightsApiGetSummaryMetricsWithTrends
    */
    readonly projectNames?: object
    
}

/**
 * Request parameters for getWorkflowSummaryMetrics operation in InsightsApi.
 * @export
 * @interface InsightsApiGetWorkflowSummaryMetricsRequest
 */
export type InsightsApiGetWorkflowSummaryMetricsRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof InsightsApiGetWorkflowSummaryMetrics
    */
    readonly projectSlug: string
    
    /**
    * The name of the workflow.
    * @type {string}
    * @memberof InsightsApiGetWorkflowSummaryMetrics
    */
    readonly workflowName: string
    
    /**
    * Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
    * @type {boolean}
    * @memberof InsightsApiGetWorkflowSummaryMetrics
    */
    readonly allBranches?: boolean
    
    /**
    * The name of a vcs branch. If not passed we will scope the API call to the default branch.
    * @type {string}
    * @memberof InsightsApiGetWorkflowSummaryMetrics
    */
    readonly branch?: string
    
}

/**
 * Request parameters for listProjectBranches operation in InsightsApi.
 * @export
 * @interface InsightsApiListProjectBranchesRequest
 */
export type InsightsApiListProjectBranchesRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof InsightsApiListProjectBranches
    */
    readonly projectSlug: string
    
    /**
    * The name of a workflow. If not passed we will scope the API call to the project.
    * @type {string}
    * @memberof InsightsApiListProjectBranches
    */
    readonly workflowName?: string
    
}

/**
 * InsightsApiGenerated - object-oriented interface
 * @export
 * @class InsightsApiGenerated
 * @extends {BaseAPI}
 */
export class InsightsApiGenerated extends BaseAPI {
    /**
     * Get a list of flaky tests for a given project. Flaky tests are branch agnostic.              A flaky test is a test that passed and failed in the same commit.
     * @summary Get flaky tests for a project
     * @param {InsightsApiGetFlakyTestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightsApiGenerated
     */
    public getFlakyTests(requestParameters: InsightsApiGetFlakyTestsRequest, options?: AxiosRequestConfig) {
        return InsightsApiFp(this.configuration).getFlakyTests(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get timeseries data for all jobs within a workflow. Hourly granularity data is only retained for 48 hours while daily granularity data is retained for 90 days.
     * @summary Job timeseries data
     * @param {InsightsApiGetJobTimeseriesDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightsApiGenerated
     */
    public getJobTimeseriesData(requestParameters: InsightsApiGetJobTimeseriesDataRequest, options?: AxiosRequestConfig) {
        return InsightsApiFp(this.configuration).getJobTimeseriesData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get summary metrics and trends for a project at workflow and branch level.              Workflow runs going back at most 90 days are included in the aggregation window.              Trends are only supported upto last 30 days.              Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
     * @summary Get summary metrics and trends for a project across it\'s workflows and branches
     * @param {InsightsApiGetProjectSummaryMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightsApiGenerated
     */
    public getProjectSummaryMetrics(requestParameters: InsightsApiGetProjectSummaryMetricsRequest, options?: AxiosRequestConfig) {
        return InsightsApiFp(this.configuration).getProjectSummaryMetrics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get summary metrics for a project workflow\'s jobs. Job runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
     * @summary Get summary metrics for a project workflow\'s jobs.
     * @param {InsightsApiGetProjectWorkflowJobMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightsApiGenerated
     */
    public getProjectWorkflowJobMetrics(requestParameters: InsightsApiGetProjectWorkflowJobMetricsRequest, options?: AxiosRequestConfig) {
        return InsightsApiFp(this.configuration).getProjectWorkflowJobMetrics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get summary metrics for a project\'s workflows.  Workflow runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours.  Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
     * @summary Get summary metrics for a project\'s workflows
     * @param {InsightsApiGetProjectWorkflowMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightsApiGenerated
     */
    public getProjectWorkflowMetrics(requestParameters: InsightsApiGetProjectWorkflowMetricsRequest, options?: AxiosRequestConfig) {
        return InsightsApiFp(this.configuration).getProjectWorkflowMetrics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get test metrics for a project\'s workflows. Currently tests metrics are calculated based on 10 most recent workflow runs.
     * @summary Get test metrics for a project\'s workflows
     * @param {InsightsApiGetProjectWorkflowTestMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightsApiGenerated
     */
    public getProjectWorkflowTestMetrics(requestParameters: InsightsApiGetProjectWorkflowTestMetricsRequest, options?: AxiosRequestConfig) {
        return InsightsApiFp(this.configuration).getProjectWorkflowTestMetrics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get recent runs of a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
     * @summary Get recent runs of a workflow
     * @param {InsightsApiGetRecentWorkflowRunsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightsApiGenerated
     */
    public getRecentWorkflowRuns(requestParameters: InsightsApiGetRecentWorkflowRunsRequest, options?: AxiosRequestConfig) {
        return InsightsApiFp(this.configuration).getRecentWorkflowRuns(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets aggregated summary metrics with trends for the entire org.               Also gets aggregated metrics and trends for each project belonging to the org.
     * @summary Get summary metrics with trends for the entire org, and for each project.
     * @param {InsightsApiGetSummaryMetricsWithTrendsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightsApiGenerated
     */
    public getSummaryMetricsWithTrends(requestParameters: InsightsApiGetSummaryMetricsWithTrendsRequest, options?: AxiosRequestConfig) {
        return InsightsApiFp(this.configuration).getSummaryMetricsWithTrends(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the metrics and trends for a particular workflow on a single branch or all branches
     * @summary Get metrics and trends for workflows
     * @param {InsightsApiGetWorkflowSummaryMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightsApiGenerated
     */
    public getWorkflowSummaryMetrics(requestParameters: InsightsApiGetWorkflowSummaryMetricsRequest, options?: AxiosRequestConfig) {
        return InsightsApiFp(this.configuration).getWorkflowSummaryMetrics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all branches for a specified project. The list will only contain branches currently available within Insights. The maximum number of branches returned by this endpoint is 5,000.
     * @summary Get all branches for a project
     * @param {InsightsApiListProjectBranchesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightsApiGenerated
     */
    public listProjectBranches(requestParameters: InsightsApiListProjectBranchesRequest, options?: AxiosRequestConfig) {
        return InsightsApiFp(this.configuration).listProjectBranches(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
