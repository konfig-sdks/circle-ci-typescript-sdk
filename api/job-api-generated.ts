/* tslint:disable */
/* eslint-disable */
/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

The version of the OpenAPI document: v2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JobCancelWithNumberResponse } from '../models';
// @ts-ignore
import { JobCancelWithNumberdefaultResponse } from '../models';
// @ts-ignore
import { JobGetArtifactsResponse } from '../models';
// @ts-ignore
import { JobGetArtifactsdefaultResponse } from '../models';
// @ts-ignore
import { JobGetDetailsResponse } from '../models';
// @ts-ignore
import { JobGetDetailsdefaultResponse } from '../models';
// @ts-ignore
import { JobGetTestMetadataResponse } from '../models';
// @ts-ignore
import { JobGetTestMetadatadefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * JobApi - axios parameter creator
 * @export
 */
export const JobApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel job with a given job number.
         * @summary Cancel job
         * @param {any} jobNumber The number of the job.
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelWithNumber: async (jobNumber: any, projectSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobNumber' is not null or undefined
            assertParamExists('cancelWithNumber', 'jobNumber', jobNumber)
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('cancelWithNumber', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/job/{job-number}/cancel`
                .replace(`{${"job-number"}}`, encodeURIComponent(String(jobNumber !== undefined ? jobNumber : `-job-number-`)))
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/job/{job-number}/cancel',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a job\'s artifacts.
         * @summary Get a job\'s artifacts
         * @param {any} jobNumber The number of the job.
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtifacts: async (jobNumber: any, projectSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobNumber' is not null or undefined
            assertParamExists('getArtifacts', 'jobNumber', jobNumber)
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getArtifacts', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/{job-number}/artifacts`
                .replace(`{${"job-number"}}`, encodeURIComponent(String(jobNumber !== undefined ? jobNumber : `-job-number-`)))
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/{job-number}/artifacts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns job details.
         * @summary Get job details
         * @param {any} jobNumber The number of the job.
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (jobNumber: any, projectSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobNumber' is not null or undefined
            assertParamExists('getDetails', 'jobNumber', jobNumber)
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getDetails', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/job/{job-number}`
                .replace(`{${"job-number"}}`, encodeURIComponent(String(jobNumber !== undefined ? jobNumber : `-job-number-`)))
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/job/{job-number}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get test metadata for a build. In the rare case where there is more than 250MB of test data on the job, no results will be returned.
         * @summary Get test metadata
         * @param {any} jobNumber The number of the job.
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestMetadata: async (jobNumber: any, projectSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobNumber' is not null or undefined
            assertParamExists('getTestMetadata', 'jobNumber', jobNumber)
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getTestMetadata', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/{job-number}/tests`
                .replace(`{${"job-number"}}`, encodeURIComponent(String(jobNumber !== undefined ? jobNumber : `-job-number-`)))
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/{job-number}/tests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobApi - functional programming interface
 * @export
 */
export const JobApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel job with a given job number.
         * @summary Cancel job
         * @param {JobApiCancelWithNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelWithNumber(requestParameters: JobApiCancelWithNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobCancelWithNumberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelWithNumber(requestParameters.jobNumber, requestParameters.projectSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a job\'s artifacts.
         * @summary Get a job\'s artifacts
         * @param {JobApiGetArtifactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtifacts(requestParameters: JobApiGetArtifactsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobGetArtifactsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArtifacts(requestParameters.jobNumber, requestParameters.projectSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns job details.
         * @summary Get job details
         * @param {JobApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: JobApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobGetDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.jobNumber, requestParameters.projectSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get test metadata for a build. In the rare case where there is more than 250MB of test data on the job, no results will be returned.
         * @summary Get test metadata
         * @param {JobApiGetTestMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestMetadata(requestParameters: JobApiGetTestMetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobGetTestMetadataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestMetadata(requestParameters.jobNumber, requestParameters.projectSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobApi - factory interface
 * @export
 */
export const JobApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobApiFp(configuration)
    return {
        /**
         * Cancel job with a given job number.
         * @summary Cancel job
         * @param {JobApiCancelWithNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelWithNumber(requestParameters: JobApiCancelWithNumberRequest, options?: AxiosRequestConfig): AxiosPromise<JobCancelWithNumberResponse> {
            return localVarFp.cancelWithNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a job\'s artifacts.
         * @summary Get a job\'s artifacts
         * @param {JobApiGetArtifactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtifacts(requestParameters: JobApiGetArtifactsRequest, options?: AxiosRequestConfig): AxiosPromise<JobGetArtifactsResponse> {
            return localVarFp.getArtifacts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns job details.
         * @summary Get job details
         * @param {JobApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: JobApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<JobGetDetailsResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get test metadata for a build. In the rare case where there is more than 250MB of test data on the job, no results will be returned.
         * @summary Get test metadata
         * @param {JobApiGetTestMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestMetadata(requestParameters: JobApiGetTestMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<JobGetTestMetadataResponse> {
            return localVarFp.getTestMetadata(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelWithNumber operation in JobApi.
 * @export
 * @interface JobApiCancelWithNumberRequest
 */
export type JobApiCancelWithNumberRequest = {
    
    /**
    * The number of the job.
    * @type {any}
    * @memberof JobApiCancelWithNumber
    */
    readonly jobNumber: any
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof JobApiCancelWithNumber
    */
    readonly projectSlug: string
    
}

/**
 * Request parameters for getArtifacts operation in JobApi.
 * @export
 * @interface JobApiGetArtifactsRequest
 */
export type JobApiGetArtifactsRequest = {
    
    /**
    * The number of the job.
    * @type {any}
    * @memberof JobApiGetArtifacts
    */
    readonly jobNumber: any
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof JobApiGetArtifacts
    */
    readonly projectSlug: string
    
}

/**
 * Request parameters for getDetails operation in JobApi.
 * @export
 * @interface JobApiGetDetailsRequest
 */
export type JobApiGetDetailsRequest = {
    
    /**
    * The number of the job.
    * @type {any}
    * @memberof JobApiGetDetails
    */
    readonly jobNumber: any
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof JobApiGetDetails
    */
    readonly projectSlug: string
    
}

/**
 * Request parameters for getTestMetadata operation in JobApi.
 * @export
 * @interface JobApiGetTestMetadataRequest
 */
export type JobApiGetTestMetadataRequest = {
    
    /**
    * The number of the job.
    * @type {any}
    * @memberof JobApiGetTestMetadata
    */
    readonly jobNumber: any
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof JobApiGetTestMetadata
    */
    readonly projectSlug: string
    
}

/**
 * JobApiGenerated - object-oriented interface
 * @export
 * @class JobApiGenerated
 * @extends {BaseAPI}
 */
export class JobApiGenerated extends BaseAPI {
    /**
     * Cancel job with a given job number.
     * @summary Cancel job
     * @param {JobApiCancelWithNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApiGenerated
     */
    public cancelWithNumber(requestParameters: JobApiCancelWithNumberRequest, options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration).cancelWithNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a job\'s artifacts.
     * @summary Get a job\'s artifacts
     * @param {JobApiGetArtifactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApiGenerated
     */
    public getArtifacts(requestParameters: JobApiGetArtifactsRequest, options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration).getArtifacts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns job details.
     * @summary Get job details
     * @param {JobApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApiGenerated
     */
    public getDetails(requestParameters: JobApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get test metadata for a build. In the rare case where there is more than 250MB of test data on the job, no results will be returned.
     * @summary Get test metadata
     * @param {JobApiGetTestMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApiGenerated
     */
    public getTestMetadata(requestParameters: JobApiGetTestMetadataRequest, options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration).getTestMetadata(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
