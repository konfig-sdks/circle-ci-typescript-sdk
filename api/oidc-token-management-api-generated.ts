/* tslint:disable */
/* eslint-disable */
/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

The version of the OpenAPI document: v2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClaimResponse } from '../models';
// @ts-ignore
import { OidcTokenManagementDeleteOrgClaims403Response } from '../models';
// @ts-ignore
import { OidcTokenManagementDeleteOrgClaims500Response } from '../models';
// @ts-ignore
import { OidcTokenManagementDeleteOrgClaimsResponse } from '../models';
// @ts-ignore
import { PatchClaimsRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OidcTokenManagementApi - axios parameter creator
 * @export
 */
export const OidcTokenManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes org-level custom claims of OIDC identity tokens
         * @summary Delete org-level claims
         * @param {string} orgID 
         * @param {string} claims comma separated list of claims to delete. Valid values are \&quot;audience\&quot; and \&quot;ttl\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrgClaims: async (orgID: string, claims: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgID' is not null or undefined
            assertParamExists('deleteOrgClaims', 'orgID', orgID)
            // verify required parameter 'claims' is not null or undefined
            assertParamExists('deleteOrgClaims', 'claims', claims)
            const localVarPath = `/org/{orgID}/oidc-custom-claims`
                .replace(`{${"orgID"}}`, encodeURIComponent(String(orgID !== undefined ? orgID : `-orgID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (claims !== undefined) {
                localVarQueryParameter['claims'] = claims;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/org/{orgID}/oidc-custom-claims',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes project-level custom claims of OIDC identity tokens
         * @summary Delete project-level claims
         * @param {string} orgID 
         * @param {string} projectID 
         * @param {string} claims comma separated list of claims to delete. Valid values are \&quot;audience\&quot; and \&quot;ttl\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectClaims: async (orgID: string, projectID: string, claims: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgID' is not null or undefined
            assertParamExists('deleteProjectClaims', 'orgID', orgID)
            // verify required parameter 'projectID' is not null or undefined
            assertParamExists('deleteProjectClaims', 'projectID', projectID)
            // verify required parameter 'claims' is not null or undefined
            assertParamExists('deleteProjectClaims', 'claims', claims)
            const localVarPath = `/org/{orgID}/project/{projectID}/oidc-custom-claims`
                .replace(`{${"orgID"}}`, encodeURIComponent(String(orgID !== undefined ? orgID : `-orgID-`)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID !== undefined ? projectID : `-projectID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (claims !== undefined) {
                localVarQueryParameter['claims'] = claims;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/org/{orgID}/project/{projectID}/oidc-custom-claims',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches org-level custom claims of OIDC identity tokens
         * @summary Get org-level claims
         * @param {string} orgID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgClaims: async (orgID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgID' is not null or undefined
            assertParamExists('getOrgClaims', 'orgID', orgID)
            const localVarPath = `/org/{orgID}/oidc-custom-claims`
                .replace(`{${"orgID"}}`, encodeURIComponent(String(orgID !== undefined ? orgID : `-orgID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/org/{orgID}/oidc-custom-claims',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches project-level custom claims of OIDC identity tokens
         * @summary Get project-level claims
         * @param {string} orgID 
         * @param {string} projectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectClaims: async (orgID: string, projectID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgID' is not null or undefined
            assertParamExists('getProjectClaims', 'orgID', orgID)
            // verify required parameter 'projectID' is not null or undefined
            assertParamExists('getProjectClaims', 'projectID', projectID)
            const localVarPath = `/org/{orgID}/project/{projectID}/oidc-custom-claims`
                .replace(`{${"orgID"}}`, encodeURIComponent(String(orgID !== undefined ? orgID : `-orgID-`)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID !== undefined ? projectID : `-projectID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/org/{orgID}/project/{projectID}/oidc-custom-claims',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates/Updates org-level custom claims of OIDC identity tokens
         * @summary Patch org-level claims
         * @param {string} orgID 
         * @param {PatchClaimsRequest} [patchClaimsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrgClaims: async (orgID: string, patchClaimsRequest?: PatchClaimsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgID' is not null or undefined
            assertParamExists('updateOrgClaims', 'orgID', orgID)
            const localVarPath = `/org/{orgID}/oidc-custom-claims`
                .replace(`{${"orgID"}}`, encodeURIComponent(String(orgID !== undefined ? orgID : `-orgID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: patchClaimsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/org/{orgID}/oidc-custom-claims',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(patchClaimsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates/Updates project-level custom claims of OIDC identity tokens
         * @summary Patch project-level claims
         * @param {string} orgID 
         * @param {string} projectID 
         * @param {PatchClaimsRequest} [patchClaimsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectClaims: async (orgID: string, projectID: string, patchClaimsRequest?: PatchClaimsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgID' is not null or undefined
            assertParamExists('updateProjectClaims', 'orgID', orgID)
            // verify required parameter 'projectID' is not null or undefined
            assertParamExists('updateProjectClaims', 'projectID', projectID)
            const localVarPath = `/org/{orgID}/project/{projectID}/oidc-custom-claims`
                .replace(`{${"orgID"}}`, encodeURIComponent(String(orgID !== undefined ? orgID : `-orgID-`)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID !== undefined ? projectID : `-projectID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: patchClaimsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/org/{orgID}/project/{projectID}/oidc-custom-claims',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(patchClaimsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OidcTokenManagementApi - functional programming interface
 * @export
 */
export const OidcTokenManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OidcTokenManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes org-level custom claims of OIDC identity tokens
         * @summary Delete org-level claims
         * @param {OidcTokenManagementApiDeleteOrgClaimsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrgClaims(requestParameters: OidcTokenManagementApiDeleteOrgClaimsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClaimResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrgClaims(requestParameters.orgID, requestParameters.claims, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes project-level custom claims of OIDC identity tokens
         * @summary Delete project-level claims
         * @param {OidcTokenManagementApiDeleteProjectClaimsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectClaims(requestParameters: OidcTokenManagementApiDeleteProjectClaimsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClaimResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectClaims(requestParameters.orgID, requestParameters.projectID, requestParameters.claims, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches org-level custom claims of OIDC identity tokens
         * @summary Get org-level claims
         * @param {OidcTokenManagementApiGetOrgClaimsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgClaims(requestParameters: OidcTokenManagementApiGetOrgClaimsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClaimResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgClaims(requestParameters.orgID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches project-level custom claims of OIDC identity tokens
         * @summary Get project-level claims
         * @param {OidcTokenManagementApiGetProjectClaimsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectClaims(requestParameters: OidcTokenManagementApiGetProjectClaimsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClaimResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectClaims(requestParameters.orgID, requestParameters.projectID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates/Updates org-level custom claims of OIDC identity tokens
         * @summary Patch org-level claims
         * @param {OidcTokenManagementApiUpdateOrgClaimsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrgClaims(requestParameters: OidcTokenManagementApiUpdateOrgClaimsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClaimResponse>> {
            const patchClaimsRequest: PatchClaimsRequest = {
                audience: requestParameters.audience,
                ttl: requestParameters.ttl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrgClaims(requestParameters.orgID, patchClaimsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates/Updates project-level custom claims of OIDC identity tokens
         * @summary Patch project-level claims
         * @param {OidcTokenManagementApiUpdateProjectClaimsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectClaims(requestParameters: OidcTokenManagementApiUpdateProjectClaimsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClaimResponse>> {
            const patchClaimsRequest: PatchClaimsRequest = {
                audience: requestParameters.audience,
                ttl: requestParameters.ttl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectClaims(requestParameters.orgID, requestParameters.projectID, patchClaimsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OidcTokenManagementApi - factory interface
 * @export
 */
export const OidcTokenManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OidcTokenManagementApiFp(configuration)
    return {
        /**
         * Deletes org-level custom claims of OIDC identity tokens
         * @summary Delete org-level claims
         * @param {OidcTokenManagementApiDeleteOrgClaimsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrgClaims(requestParameters: OidcTokenManagementApiDeleteOrgClaimsRequest, options?: AxiosRequestConfig): AxiosPromise<ClaimResponse> {
            return localVarFp.deleteOrgClaims(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes project-level custom claims of OIDC identity tokens
         * @summary Delete project-level claims
         * @param {OidcTokenManagementApiDeleteProjectClaimsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectClaims(requestParameters: OidcTokenManagementApiDeleteProjectClaimsRequest, options?: AxiosRequestConfig): AxiosPromise<ClaimResponse> {
            return localVarFp.deleteProjectClaims(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches org-level custom claims of OIDC identity tokens
         * @summary Get org-level claims
         * @param {OidcTokenManagementApiGetOrgClaimsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgClaims(requestParameters: OidcTokenManagementApiGetOrgClaimsRequest, options?: AxiosRequestConfig): AxiosPromise<ClaimResponse> {
            return localVarFp.getOrgClaims(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches project-level custom claims of OIDC identity tokens
         * @summary Get project-level claims
         * @param {OidcTokenManagementApiGetProjectClaimsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectClaims(requestParameters: OidcTokenManagementApiGetProjectClaimsRequest, options?: AxiosRequestConfig): AxiosPromise<ClaimResponse> {
            return localVarFp.getProjectClaims(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates/Updates org-level custom claims of OIDC identity tokens
         * @summary Patch org-level claims
         * @param {OidcTokenManagementApiUpdateOrgClaimsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrgClaims(requestParameters: OidcTokenManagementApiUpdateOrgClaimsRequest, options?: AxiosRequestConfig): AxiosPromise<ClaimResponse> {
            return localVarFp.updateOrgClaims(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates/Updates project-level custom claims of OIDC identity tokens
         * @summary Patch project-level claims
         * @param {OidcTokenManagementApiUpdateProjectClaimsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectClaims(requestParameters: OidcTokenManagementApiUpdateProjectClaimsRequest, options?: AxiosRequestConfig): AxiosPromise<ClaimResponse> {
            return localVarFp.updateProjectClaims(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteOrgClaims operation in OidcTokenManagementApi.
 * @export
 * @interface OidcTokenManagementApiDeleteOrgClaimsRequest
 */
export type OidcTokenManagementApiDeleteOrgClaimsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OidcTokenManagementApiDeleteOrgClaims
    */
    readonly orgID: string
    
    /**
    * comma separated list of claims to delete. Valid values are \"audience\" and \"ttl\".
    * @type {string}
    * @memberof OidcTokenManagementApiDeleteOrgClaims
    */
    readonly claims: string
    
}

/**
 * Request parameters for deleteProjectClaims operation in OidcTokenManagementApi.
 * @export
 * @interface OidcTokenManagementApiDeleteProjectClaimsRequest
 */
export type OidcTokenManagementApiDeleteProjectClaimsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OidcTokenManagementApiDeleteProjectClaims
    */
    readonly orgID: string
    
    /**
    * 
    * @type {string}
    * @memberof OidcTokenManagementApiDeleteProjectClaims
    */
    readonly projectID: string
    
    /**
    * comma separated list of claims to delete. Valid values are \"audience\" and \"ttl\".
    * @type {string}
    * @memberof OidcTokenManagementApiDeleteProjectClaims
    */
    readonly claims: string
    
}

/**
 * Request parameters for getOrgClaims operation in OidcTokenManagementApi.
 * @export
 * @interface OidcTokenManagementApiGetOrgClaimsRequest
 */
export type OidcTokenManagementApiGetOrgClaimsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OidcTokenManagementApiGetOrgClaims
    */
    readonly orgID: string
    
}

/**
 * Request parameters for getProjectClaims operation in OidcTokenManagementApi.
 * @export
 * @interface OidcTokenManagementApiGetProjectClaimsRequest
 */
export type OidcTokenManagementApiGetProjectClaimsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OidcTokenManagementApiGetProjectClaims
    */
    readonly orgID: string
    
    /**
    * 
    * @type {string}
    * @memberof OidcTokenManagementApiGetProjectClaims
    */
    readonly projectID: string
    
}

/**
 * Request parameters for updateOrgClaims operation in OidcTokenManagementApi.
 * @export
 * @interface OidcTokenManagementApiUpdateOrgClaimsRequest
 */
export type OidcTokenManagementApiUpdateOrgClaimsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OidcTokenManagementApiUpdateOrgClaims
    */
    readonly orgID: string
    
} & PatchClaimsRequest

/**
 * Request parameters for updateProjectClaims operation in OidcTokenManagementApi.
 * @export
 * @interface OidcTokenManagementApiUpdateProjectClaimsRequest
 */
export type OidcTokenManagementApiUpdateProjectClaimsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OidcTokenManagementApiUpdateProjectClaims
    */
    readonly orgID: string
    
    /**
    * 
    * @type {string}
    * @memberof OidcTokenManagementApiUpdateProjectClaims
    */
    readonly projectID: string
    
} & PatchClaimsRequest

/**
 * OidcTokenManagementApiGenerated - object-oriented interface
 * @export
 * @class OidcTokenManagementApiGenerated
 * @extends {BaseAPI}
 */
export class OidcTokenManagementApiGenerated extends BaseAPI {
    /**
     * Deletes org-level custom claims of OIDC identity tokens
     * @summary Delete org-level claims
     * @param {OidcTokenManagementApiDeleteOrgClaimsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcTokenManagementApiGenerated
     */
    public deleteOrgClaims(requestParameters: OidcTokenManagementApiDeleteOrgClaimsRequest, options?: AxiosRequestConfig) {
        return OidcTokenManagementApiFp(this.configuration).deleteOrgClaims(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes project-level custom claims of OIDC identity tokens
     * @summary Delete project-level claims
     * @param {OidcTokenManagementApiDeleteProjectClaimsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcTokenManagementApiGenerated
     */
    public deleteProjectClaims(requestParameters: OidcTokenManagementApiDeleteProjectClaimsRequest, options?: AxiosRequestConfig) {
        return OidcTokenManagementApiFp(this.configuration).deleteProjectClaims(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches org-level custom claims of OIDC identity tokens
     * @summary Get org-level claims
     * @param {OidcTokenManagementApiGetOrgClaimsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcTokenManagementApiGenerated
     */
    public getOrgClaims(requestParameters: OidcTokenManagementApiGetOrgClaimsRequest, options?: AxiosRequestConfig) {
        return OidcTokenManagementApiFp(this.configuration).getOrgClaims(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches project-level custom claims of OIDC identity tokens
     * @summary Get project-level claims
     * @param {OidcTokenManagementApiGetProjectClaimsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcTokenManagementApiGenerated
     */
    public getProjectClaims(requestParameters: OidcTokenManagementApiGetProjectClaimsRequest, options?: AxiosRequestConfig) {
        return OidcTokenManagementApiFp(this.configuration).getProjectClaims(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates/Updates org-level custom claims of OIDC identity tokens
     * @summary Patch org-level claims
     * @param {OidcTokenManagementApiUpdateOrgClaimsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcTokenManagementApiGenerated
     */
    public updateOrgClaims(requestParameters: OidcTokenManagementApiUpdateOrgClaimsRequest, options?: AxiosRequestConfig) {
        return OidcTokenManagementApiFp(this.configuration).updateOrgClaims(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates/Updates project-level custom claims of OIDC identity tokens
     * @summary Patch project-level claims
     * @param {OidcTokenManagementApiUpdateProjectClaimsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcTokenManagementApiGenerated
     */
    public updateProjectClaims(requestParameters: OidcTokenManagementApiUpdateProjectClaimsRequest, options?: AxiosRequestConfig) {
        return OidcTokenManagementApiFp(this.configuration).updateProjectClaims(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
