/* tslint:disable */
/* eslint-disable */
/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

The version of the OpenAPI document: v2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PipelineContinueExecutionRequest } from '../models';
// @ts-ignore
import { PipelineContinueExecutionRequestParametersValue } from '../models';
// @ts-ignore
import { PipelineContinueExecutionResponse } from '../models';
// @ts-ignore
import { PipelineContinueExecutiondefaultResponse } from '../models';
// @ts-ignore
import { PipelineGetAllPipelinesResponse } from '../models';
// @ts-ignore
import { PipelineGetAllPipelinesdefaultResponse } from '../models';
// @ts-ignore
import { PipelineGetByIdResponse } from '../models';
// @ts-ignore
import { PipelineGetByIddefaultResponse } from '../models';
// @ts-ignore
import { PipelineGetByNumberResponse } from '../models';
// @ts-ignore
import { PipelineGetByNumberdefaultResponse } from '../models';
// @ts-ignore
import { PipelineGetConfigurationByIdResponse } from '../models';
// @ts-ignore
import { PipelineGetConfigurationByIddefaultResponse } from '../models';
// @ts-ignore
import { PipelineListRecentPipelinesResponse } from '../models';
// @ts-ignore
import { PipelineListRecentPipelinesdefaultResponse } from '../models';
// @ts-ignore
import { PipelineListUserPipelinesResponse } from '../models';
// @ts-ignore
import { PipelineListUserPipelinesdefaultResponse } from '../models';
// @ts-ignore
import { PipelineListWorkflowsResponse } from '../models';
// @ts-ignore
import { PipelineListWorkflowsdefaultResponse } from '../models';
// @ts-ignore
import { PipelineTriggerNewPipelineRequest } from '../models';
// @ts-ignore
import { PipelineTriggerNewPipelineResponse } from '../models';
// @ts-ignore
import { PipelineTriggerNewPipelinedefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PipelineApi - axios parameter creator
 * @export
 */
export const PipelineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Continue a pipeline from the setup phase. For information on using pipeline parameters with dynamic configuration, see the [Pipeline values and parameters](https://circleci.com/docs/pipeline-variables/#pipeline-parameters-and-dynamic-configuration) docs.
         * @summary Continue a pipeline
         * @param {PipelineContinueExecutionRequest} [pipelineContinueExecutionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        continueExecution: async (pipelineContinueExecutionRequest?: PipelineContinueExecutionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pipeline/continue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: pipelineContinueExecutionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pipeline/continue',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(pipelineContinueExecutionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all pipelines for this project.
         * @summary Get all pipelines
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} [branch] The name of a vcs branch.
         * @param {string} [pageToken] A token to retrieve the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPipelines: async (projectSlug: string, branch?: string, pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getAllPipelines', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/pipeline`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (branch !== undefined) {
                localVarQueryParameter['branch'] = branch;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page-token'] = pageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/pipeline',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a pipeline by the pipeline ID.
         * @summary Get a pipeline by ID
         * @param {string} pipelineId The unique ID of the pipeline.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (pipelineId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pipelineId' is not null or undefined
            assertParamExists('getById', 'pipelineId', pipelineId)
            const localVarPath = `/pipeline/{pipeline-id}`
                .replace(`{${"pipeline-id"}}`, encodeURIComponent(String(pipelineId !== undefined ? pipelineId : `-pipeline-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pipeline/{pipeline-id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a pipeline by the pipeline number.
         * @summary Get a pipeline by pipeline number
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {any} pipelineNumber The number of the pipeline.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByNumber: async (projectSlug: string, pipelineNumber: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getByNumber', 'projectSlug', projectSlug)
            // verify required parameter 'pipelineNumber' is not null or undefined
            assertParamExists('getByNumber', 'pipelineNumber', pipelineNumber)
            const localVarPath = `/project/{project-slug}/pipeline/{pipeline-number}`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)))
                .replace(`{${"pipeline-number"}}`, encodeURIComponent(String(pipelineNumber !== undefined ? pipelineNumber : `-pipeline-number-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/pipeline/{pipeline-number}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a pipeline\'s configuration by ID.
         * @summary Get a pipeline\'s configuration
         * @param {string} pipelineId The unique ID of the pipeline.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationById: async (pipelineId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pipelineId' is not null or undefined
            assertParamExists('getConfigurationById', 'pipelineId', pipelineId)
            const localVarPath = `/pipeline/{pipeline-id}/config`
                .replace(`{${"pipeline-id"}}`, encodeURIComponent(String(pipelineId !== undefined ? pipelineId : `-pipeline-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pipeline/{pipeline-id}/config',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all pipelines for the most recently built projects (max 250) you follow in an organization.
         * @summary Get a list of pipelines
         * @param {string} [orgSlug] Org slug in the form &#x60;vcs-slug/org-name&#x60;. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60; and replace the &#x60;org-name&#x60; with the organization ID (found in Organization Settings).
         * @param {string} [pageToken] A token to retrieve the next page of results.
         * @param {boolean} [mine] Only include entries created by your user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecentPipelines: async (orgSlug?: string, pageToken?: string, mine?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pipeline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (orgSlug !== undefined) {
                localVarQueryParameter['org-slug'] = orgSlug;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page-token'] = pageToken;
            }

            if (mine !== undefined) {
                localVarQueryParameter['mine'] = mine;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pipeline',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a sequence of all pipelines for this project triggered by the user.
         * @summary Get your pipelines
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} [pageToken] A token to retrieve the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPipelines: async (projectSlug: string, pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('listUserPipelines', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/pipeline/mine`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (pageToken !== undefined) {
                localVarQueryParameter['page-token'] = pageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/pipeline/mine',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of workflows by pipeline ID.
         * @summary Get a pipeline\'s workflows
         * @param {string} pipelineId The unique ID of the pipeline.
         * @param {string} [pageToken] A token to retrieve the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflows: async (pipelineId: string, pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pipelineId' is not null or undefined
            assertParamExists('listWorkflows', 'pipelineId', pipelineId)
            const localVarPath = `/pipeline/{pipeline-id}/workflow`
                .replace(`{${"pipeline-id"}}`, encodeURIComponent(String(pipelineId !== undefined ? pipelineId : `-pipeline-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (pageToken !== undefined) {
                localVarQueryParameter['page-token'] = pageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pipeline/{pipeline-id}/workflow',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Not yet available to projects that use GitLab or GitHub App. Triggers a new pipeline on the project.
         * @summary Trigger a new pipeline
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {PipelineTriggerNewPipelineRequest} [pipelineTriggerNewPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerNewPipeline: async (projectSlug: string, pipelineTriggerNewPipelineRequest?: PipelineTriggerNewPipelineRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('triggerNewPipeline', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/pipeline`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: pipelineTriggerNewPipelineRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/pipeline',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(pipelineTriggerNewPipelineRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PipelineApi - functional programming interface
 * @export
 */
export const PipelineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PipelineApiAxiosParamCreator(configuration)
    return {
        /**
         * Continue a pipeline from the setup phase. For information on using pipeline parameters with dynamic configuration, see the [Pipeline values and parameters](https://circleci.com/docs/pipeline-variables/#pipeline-parameters-and-dynamic-configuration) docs.
         * @summary Continue a pipeline
         * @param {PipelineApiContinueExecutionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async continueExecution(requestParameters: PipelineApiContinueExecutionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineContinueExecutionResponse>> {
            const pipelineContinueExecutionRequest: PipelineContinueExecutionRequest = {
                parameters: requestParameters.parameters,
                continuation-key: requestParameters.continuation-key,
                configuration: requestParameters.configuration
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.continueExecution(pipelineContinueExecutionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all pipelines for this project.
         * @summary Get all pipelines
         * @param {PipelineApiGetAllPipelinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPipelines(requestParameters: PipelineApiGetAllPipelinesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineGetAllPipelinesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPipelines(requestParameters.projectSlug, requestParameters.branch, requestParameters.pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a pipeline by the pipeline ID.
         * @summary Get a pipeline by ID
         * @param {PipelineApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: PipelineApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.pipelineId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a pipeline by the pipeline number.
         * @summary Get a pipeline by pipeline number
         * @param {PipelineApiGetByNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByNumber(requestParameters: PipelineApiGetByNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineGetByNumberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByNumber(requestParameters.projectSlug, requestParameters.pipelineNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a pipeline\'s configuration by ID.
         * @summary Get a pipeline\'s configuration
         * @param {PipelineApiGetConfigurationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfigurationById(requestParameters: PipelineApiGetConfigurationByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineGetConfigurationByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfigurationById(requestParameters.pipelineId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all pipelines for the most recently built projects (max 250) you follow in an organization.
         * @summary Get a list of pipelines
         * @param {PipelineApiListRecentPipelinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRecentPipelines(requestParameters: PipelineApiListRecentPipelinesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineListRecentPipelinesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRecentPipelines(requestParameters.orgSlug, requestParameters.pageToken, requestParameters.mine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a sequence of all pipelines for this project triggered by the user.
         * @summary Get your pipelines
         * @param {PipelineApiListUserPipelinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserPipelines(requestParameters: PipelineApiListUserPipelinesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineListUserPipelinesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserPipelines(requestParameters.projectSlug, requestParameters.pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a paginated list of workflows by pipeline ID.
         * @summary Get a pipeline\'s workflows
         * @param {PipelineApiListWorkflowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkflows(requestParameters: PipelineApiListWorkflowsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineListWorkflowsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkflows(requestParameters.pipelineId, requestParameters.pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Not yet available to projects that use GitLab or GitHub App. Triggers a new pipeline on the project.
         * @summary Trigger a new pipeline
         * @param {PipelineApiTriggerNewPipelineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerNewPipeline(requestParameters: PipelineApiTriggerNewPipelineRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineTriggerNewPipelineResponse>> {
            const pipelineTriggerNewPipelineRequest: PipelineTriggerNewPipelineRequest = {
                parameters: requestParameters.parameters,
                branch: requestParameters.branch,
                tag: requestParameters.tag
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerNewPipeline(requestParameters.projectSlug, pipelineTriggerNewPipelineRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PipelineApi - factory interface
 * @export
 */
export const PipelineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PipelineApiFp(configuration)
    return {
        /**
         * Continue a pipeline from the setup phase. For information on using pipeline parameters with dynamic configuration, see the [Pipeline values and parameters](https://circleci.com/docs/pipeline-variables/#pipeline-parameters-and-dynamic-configuration) docs.
         * @summary Continue a pipeline
         * @param {PipelineApiContinueExecutionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        continueExecution(requestParameters: PipelineApiContinueExecutionRequest, options?: AxiosRequestConfig): AxiosPromise<PipelineContinueExecutionResponse> {
            return localVarFp.continueExecution(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all pipelines for this project.
         * @summary Get all pipelines
         * @param {PipelineApiGetAllPipelinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPipelines(requestParameters: PipelineApiGetAllPipelinesRequest, options?: AxiosRequestConfig): AxiosPromise<PipelineGetAllPipelinesResponse> {
            return localVarFp.getAllPipelines(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a pipeline by the pipeline ID.
         * @summary Get a pipeline by ID
         * @param {PipelineApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: PipelineApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PipelineGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a pipeline by the pipeline number.
         * @summary Get a pipeline by pipeline number
         * @param {PipelineApiGetByNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByNumber(requestParameters: PipelineApiGetByNumberRequest, options?: AxiosRequestConfig): AxiosPromise<PipelineGetByNumberResponse> {
            return localVarFp.getByNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a pipeline\'s configuration by ID.
         * @summary Get a pipeline\'s configuration
         * @param {PipelineApiGetConfigurationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationById(requestParameters: PipelineApiGetConfigurationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PipelineGetConfigurationByIdResponse> {
            return localVarFp.getConfigurationById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all pipelines for the most recently built projects (max 250) you follow in an organization.
         * @summary Get a list of pipelines
         * @param {PipelineApiListRecentPipelinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecentPipelines(requestParameters: PipelineApiListRecentPipelinesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PipelineListRecentPipelinesResponse> {
            return localVarFp.listRecentPipelines(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a sequence of all pipelines for this project triggered by the user.
         * @summary Get your pipelines
         * @param {PipelineApiListUserPipelinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPipelines(requestParameters: PipelineApiListUserPipelinesRequest, options?: AxiosRequestConfig): AxiosPromise<PipelineListUserPipelinesResponse> {
            return localVarFp.listUserPipelines(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of workflows by pipeline ID.
         * @summary Get a pipeline\'s workflows
         * @param {PipelineApiListWorkflowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflows(requestParameters: PipelineApiListWorkflowsRequest, options?: AxiosRequestConfig): AxiosPromise<PipelineListWorkflowsResponse> {
            return localVarFp.listWorkflows(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Not yet available to projects that use GitLab or GitHub App. Triggers a new pipeline on the project.
         * @summary Trigger a new pipeline
         * @param {PipelineApiTriggerNewPipelineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerNewPipeline(requestParameters: PipelineApiTriggerNewPipelineRequest, options?: AxiosRequestConfig): AxiosPromise<PipelineTriggerNewPipelineResponse> {
            return localVarFp.triggerNewPipeline(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for continueExecution operation in PipelineApi.
 * @export
 * @interface PipelineApiContinueExecutionRequest
 */
export type PipelineApiContinueExecutionRequest = {
    
} & PipelineContinueExecutionRequest

/**
 * Request parameters for getAllPipelines operation in PipelineApi.
 * @export
 * @interface PipelineApiGetAllPipelinesRequest
 */
export type PipelineApiGetAllPipelinesRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof PipelineApiGetAllPipelines
    */
    readonly projectSlug: string
    
    /**
    * The name of a vcs branch.
    * @type {string}
    * @memberof PipelineApiGetAllPipelines
    */
    readonly branch?: string
    
    /**
    * A token to retrieve the next page of results.
    * @type {string}
    * @memberof PipelineApiGetAllPipelines
    */
    readonly pageToken?: string
    
}

/**
 * Request parameters for getById operation in PipelineApi.
 * @export
 * @interface PipelineApiGetByIdRequest
 */
export type PipelineApiGetByIdRequest = {
    
    /**
    * The unique ID of the pipeline.
    * @type {string}
    * @memberof PipelineApiGetById
    */
    readonly pipelineId: string
    
}

/**
 * Request parameters for getByNumber operation in PipelineApi.
 * @export
 * @interface PipelineApiGetByNumberRequest
 */
export type PipelineApiGetByNumberRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof PipelineApiGetByNumber
    */
    readonly projectSlug: string
    
    /**
    * The number of the pipeline.
    * @type {any}
    * @memberof PipelineApiGetByNumber
    */
    readonly pipelineNumber: any
    
}

/**
 * Request parameters for getConfigurationById operation in PipelineApi.
 * @export
 * @interface PipelineApiGetConfigurationByIdRequest
 */
export type PipelineApiGetConfigurationByIdRequest = {
    
    /**
    * The unique ID of the pipeline.
    * @type {string}
    * @memberof PipelineApiGetConfigurationById
    */
    readonly pipelineId: string
    
}

/**
 * Request parameters for listRecentPipelines operation in PipelineApi.
 * @export
 * @interface PipelineApiListRecentPipelinesRequest
 */
export type PipelineApiListRecentPipelinesRequest = {
    
    /**
    * Org slug in the form `vcs-slug/org-name`. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug` and replace the `org-name` with the organization ID (found in Organization Settings).
    * @type {string}
    * @memberof PipelineApiListRecentPipelines
    */
    readonly orgSlug?: string
    
    /**
    * A token to retrieve the next page of results.
    * @type {string}
    * @memberof PipelineApiListRecentPipelines
    */
    readonly pageToken?: string
    
    /**
    * Only include entries created by your user.
    * @type {boolean}
    * @memberof PipelineApiListRecentPipelines
    */
    readonly mine?: boolean
    
}

/**
 * Request parameters for listUserPipelines operation in PipelineApi.
 * @export
 * @interface PipelineApiListUserPipelinesRequest
 */
export type PipelineApiListUserPipelinesRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof PipelineApiListUserPipelines
    */
    readonly projectSlug: string
    
    /**
    * A token to retrieve the next page of results.
    * @type {string}
    * @memberof PipelineApiListUserPipelines
    */
    readonly pageToken?: string
    
}

/**
 * Request parameters for listWorkflows operation in PipelineApi.
 * @export
 * @interface PipelineApiListWorkflowsRequest
 */
export type PipelineApiListWorkflowsRequest = {
    
    /**
    * The unique ID of the pipeline.
    * @type {string}
    * @memberof PipelineApiListWorkflows
    */
    readonly pipelineId: string
    
    /**
    * A token to retrieve the next page of results.
    * @type {string}
    * @memberof PipelineApiListWorkflows
    */
    readonly pageToken?: string
    
}

/**
 * Request parameters for triggerNewPipeline operation in PipelineApi.
 * @export
 * @interface PipelineApiTriggerNewPipelineRequest
 */
export type PipelineApiTriggerNewPipelineRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof PipelineApiTriggerNewPipeline
    */
    readonly projectSlug: string
    
} & PipelineTriggerNewPipelineRequest

/**
 * PipelineApiGenerated - object-oriented interface
 * @export
 * @class PipelineApiGenerated
 * @extends {BaseAPI}
 */
export class PipelineApiGenerated extends BaseAPI {
    /**
     * Continue a pipeline from the setup phase. For information on using pipeline parameters with dynamic configuration, see the [Pipeline values and parameters](https://circleci.com/docs/pipeline-variables/#pipeline-parameters-and-dynamic-configuration) docs.
     * @summary Continue a pipeline
     * @param {PipelineApiContinueExecutionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApiGenerated
     */
    public continueExecution(requestParameters: PipelineApiContinueExecutionRequest, options?: AxiosRequestConfig) {
        return PipelineApiFp(this.configuration).continueExecution(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all pipelines for this project.
     * @summary Get all pipelines
     * @param {PipelineApiGetAllPipelinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApiGenerated
     */
    public getAllPipelines(requestParameters: PipelineApiGetAllPipelinesRequest, options?: AxiosRequestConfig) {
        return PipelineApiFp(this.configuration).getAllPipelines(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a pipeline by the pipeline ID.
     * @summary Get a pipeline by ID
     * @param {PipelineApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApiGenerated
     */
    public getById(requestParameters: PipelineApiGetByIdRequest, options?: AxiosRequestConfig) {
        return PipelineApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a pipeline by the pipeline number.
     * @summary Get a pipeline by pipeline number
     * @param {PipelineApiGetByNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApiGenerated
     */
    public getByNumber(requestParameters: PipelineApiGetByNumberRequest, options?: AxiosRequestConfig) {
        return PipelineApiFp(this.configuration).getByNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a pipeline\'s configuration by ID.
     * @summary Get a pipeline\'s configuration
     * @param {PipelineApiGetConfigurationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApiGenerated
     */
    public getConfigurationById(requestParameters: PipelineApiGetConfigurationByIdRequest, options?: AxiosRequestConfig) {
        return PipelineApiFp(this.configuration).getConfigurationById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all pipelines for the most recently built projects (max 250) you follow in an organization.
     * @summary Get a list of pipelines
     * @param {PipelineApiListRecentPipelinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApiGenerated
     */
    public listRecentPipelines(requestParameters: PipelineApiListRecentPipelinesRequest = {}, options?: AxiosRequestConfig) {
        return PipelineApiFp(this.configuration).listRecentPipelines(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a sequence of all pipelines for this project triggered by the user.
     * @summary Get your pipelines
     * @param {PipelineApiListUserPipelinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApiGenerated
     */
    public listUserPipelines(requestParameters: PipelineApiListUserPipelinesRequest, options?: AxiosRequestConfig) {
        return PipelineApiFp(this.configuration).listUserPipelines(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of workflows by pipeline ID.
     * @summary Get a pipeline\'s workflows
     * @param {PipelineApiListWorkflowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApiGenerated
     */
    public listWorkflows(requestParameters: PipelineApiListWorkflowsRequest, options?: AxiosRequestConfig) {
        return PipelineApiFp(this.configuration).listWorkflows(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Not yet available to projects that use GitLab or GitHub App. Triggers a new pipeline on the project.
     * @summary Trigger a new pipeline
     * @param {PipelineApiTriggerNewPipelineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApiGenerated
     */
    public triggerNewPipeline(requestParameters: PipelineApiTriggerNewPipelineRequest, options?: AxiosRequestConfig) {
        return PipelineApiFp(this.configuration).triggerNewPipeline(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
