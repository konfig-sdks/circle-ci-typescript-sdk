/* tslint:disable */
/* eslint-disable */
/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

The version of the OpenAPI document: v2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BundleDiff } from '../models';
// @ts-ignore
import { BundlePayload } from '../models';
// @ts-ignore
import { Decision } from '../models';
// @ts-ignore
import { DecisionLog } from '../models';
// @ts-ignore
import { DecisionSettings } from '../models';
// @ts-ignore
import { OidcTokenManagementDeleteOrgClaims403Response } from '../models';
// @ts-ignore
import { OidcTokenManagementDeleteOrgClaimsResponse } from '../models';
// @ts-ignore
import { Policy } from '../models';
// @ts-ignore
import { PolicyManagementCreatePolicyBundleForContextResponse } from '../models';
// @ts-ignore
import { PolicyManagementEvaluateInputData401Response } from '../models';
// @ts-ignore
import { PolicyManagementEvaluateInputData500Response } from '../models';
// @ts-ignore
import { PolicyManagementEvaluateInputDataRequest } from '../models';
// @ts-ignore
import { PolicyManagementEvaluateInputDataResponse } from '../models';
// @ts-ignore
import { PolicyManagementGetDecisionAuditLogByGivenIdResponse } from '../models';
// @ts-ignore
import { PolicyManagementGetDecisionAuditLogs401Response } from '../models';
// @ts-ignore
import { PolicyManagementGetDecisionAuditLogs500Response } from '../models';
// @ts-ignore
import { PolicyManagementGetDocumentResponse } from '../models';
// @ts-ignore
import { PolicyManagementGetPolicyBundleForDecisionResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PolicyManagementApi - axios parameter creator
 * @export
 */
export const PolicyManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint replaces the current policy bundle with the provided policy bundle
         * @summary Creates policy bundle for the context
         * @param {string} ownerID 
         * @param {string} context 
         * @param {boolean} [dry] 
         * @param {BundlePayload} [bundlePayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicyBundleForContext: async (ownerID: string, context: string, dry?: boolean, bundlePayload?: BundlePayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerID' is not null or undefined
            assertParamExists('createPolicyBundleForContext', 'ownerID', ownerID)
            // verify required parameter 'context' is not null or undefined
            assertParamExists('createPolicyBundleForContext', 'context', context)
            const localVarPath = `/owner/{ownerID}/context/{context}/policy-bundle`
                .replace(`{${"ownerID"}}`, encodeURIComponent(String(ownerID !== undefined ? ownerID : `-ownerID-`)))
                .replace(`{${"context"}}`, encodeURIComponent(String(context !== undefined ? context : `-context-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (dry !== undefined) {
                localVarQueryParameter['dry'] = dry;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bundlePayload,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/owner/{ownerID}/context/{context}/policy-bundle',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bundlePayload, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will evaluate input data (config+metadata) against owner\'s stored policies and return a decision.
         * @summary Makes a decision
         * @param {string} ownerID 
         * @param {string} context 
         * @param {PolicyManagementEvaluateInputDataRequest} [policyManagementEvaluateInputDataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateInputData: async (ownerID: string, context: string, policyManagementEvaluateInputDataRequest?: PolicyManagementEvaluateInputDataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerID' is not null or undefined
            assertParamExists('evaluateInputData', 'ownerID', ownerID)
            // verify required parameter 'context' is not null or undefined
            assertParamExists('evaluateInputData', 'context', context)
            const localVarPath = `/owner/{ownerID}/context/{context}/decision`
                .replace(`{${"ownerID"}}`, encodeURIComponent(String(ownerID !== undefined ? ownerID : `-ownerID-`)))
                .replace(`{${"context"}}`, encodeURIComponent(String(context !== undefined ? context : `-context-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: policyManagementEvaluateInputDataRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/owner/{ownerID}/context/{context}/decision',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(policyManagementEvaluateInputDataRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will retrieve a decision for a given decision log ID
         * @summary Retrieves the owner\'s decision audit log by given decisionID
         * @param {string} ownerID 
         * @param {string} context 
         * @param {string} decisionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionAuditLogByGivenId: async (ownerID: string, context: string, decisionID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerID' is not null or undefined
            assertParamExists('getDecisionAuditLogByGivenId', 'ownerID', ownerID)
            // verify required parameter 'context' is not null or undefined
            assertParamExists('getDecisionAuditLogByGivenId', 'context', context)
            // verify required parameter 'decisionID' is not null or undefined
            assertParamExists('getDecisionAuditLogByGivenId', 'decisionID', decisionID)
            const localVarPath = `/owner/{ownerID}/context/{context}/decision/{decisionID}`
                .replace(`{${"ownerID"}}`, encodeURIComponent(String(ownerID !== undefined ? ownerID : `-ownerID-`)))
                .replace(`{${"context"}}`, encodeURIComponent(String(context !== undefined ? context : `-context-`)))
                .replace(`{${"decisionID"}}`, encodeURIComponent(String(decisionID !== undefined ? decisionID : `-decisionID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/owner/{ownerID}/context/{context}/decision/{decisionID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will return a list of decision audit logs that were made using this owner\'s policies.
         * @summary Retrieves the owner\'s decision audit logs.
         * @param {string} ownerID 
         * @param {string} context 
         * @param {string} [status] Return decisions matching this decision status.
         * @param {string} [after] Return decisions made after this date.
         * @param {string} [before] Return decisions made before this date.
         * @param {string} [branch] Return decisions made on this branch.
         * @param {string} [projectId] Return decisions made for this project.
         * @param {string} [buildNumber] Return decisions made for this build number.
         * @param {number} [offset] Sets the offset when retrieving the decisions, for paging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionAuditLogs: async (ownerID: string, context: string, status?: string, after?: string, before?: string, branch?: string, projectId?: string, buildNumber?: string, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerID' is not null or undefined
            assertParamExists('getDecisionAuditLogs', 'ownerID', ownerID)
            // verify required parameter 'context' is not null or undefined
            assertParamExists('getDecisionAuditLogs', 'context', context)
            const localVarPath = `/owner/{ownerID}/context/{context}/decision`
                .replace(`{${"ownerID"}}`, encodeURIComponent(String(ownerID !== undefined ? ownerID : `-ownerID-`)))
                .replace(`{${"context"}}`, encodeURIComponent(String(context !== undefined ? context : `-context-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = (after as any instanceof Date) ?
                    (after as any).toISOString() :
                    after;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }

            if (branch !== undefined) {
                localVarQueryParameter['branch'] = branch;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (buildNumber !== undefined) {
                localVarQueryParameter['build_number'] = buildNumber;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/owner/{ownerID}/context/{context}/decision',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves the current decision settings (eg enable/disable policy evaluation)
         * @summary Get the decision settings
         * @param {string} ownerID 
         * @param {string} context 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionSettings: async (ownerID: string, context: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerID' is not null or undefined
            assertParamExists('getDecisionSettings', 'ownerID', ownerID)
            // verify required parameter 'context' is not null or undefined
            assertParamExists('getDecisionSettings', 'context', context)
            const localVarPath = `/owner/{ownerID}/context/{context}/decision/settings`
                .replace(`{${"ownerID"}}`, encodeURIComponent(String(ownerID !== undefined ? ownerID : `-ownerID-`)))
                .replace(`{${"context"}}`, encodeURIComponent(String(context !== undefined ? context : `-context-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/owner/{ownerID}/context/{context}/decision/settings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will retrieve a policy document.
         * @summary Retrieves a policy document
         * @param {string} ownerID 
         * @param {string} context 
         * @param {string} policyName the policy name set by the rego policy_name rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocument: async (ownerID: string, context: string, policyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerID' is not null or undefined
            assertParamExists('getDocument', 'ownerID', ownerID)
            // verify required parameter 'context' is not null or undefined
            assertParamExists('getDocument', 'context', context)
            // verify required parameter 'policyName' is not null or undefined
            assertParamExists('getDocument', 'policyName', policyName)
            const localVarPath = `/owner/{ownerID}/context/{context}/policy-bundle/{policyName}`
                .replace(`{${"ownerID"}}`, encodeURIComponent(String(ownerID !== undefined ? ownerID : `-ownerID-`)))
                .replace(`{${"context"}}`, encodeURIComponent(String(context !== undefined ? context : `-context-`)))
                .replace(`{${"policyName"}}`, encodeURIComponent(String(policyName !== undefined ? policyName : `-policyName-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/owner/{ownerID}/context/{context}/policy-bundle/{policyName}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will retrieve a policy bundle
         * @summary Retrieves Policy Bundle
         * @param {string} ownerID 
         * @param {string} context 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyBundle: async (ownerID: string, context: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerID' is not null or undefined
            assertParamExists('getPolicyBundle', 'ownerID', ownerID)
            // verify required parameter 'context' is not null or undefined
            assertParamExists('getPolicyBundle', 'context', context)
            const localVarPath = `/owner/{ownerID}/context/{context}/policy-bundle`
                .replace(`{${"ownerID"}}`, encodeURIComponent(String(ownerID !== undefined ? ownerID : `-ownerID-`)))
                .replace(`{${"context"}}`, encodeURIComponent(String(context !== undefined ? context : `-context-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/owner/{ownerID}/context/{context}/policy-bundle',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will retrieve a policy bundle for a given decision log ID
         * @summary Retrieves Policy Bundle for a given decision log ID
         * @param {string} ownerID 
         * @param {string} context 
         * @param {string} decisionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyBundleForDecision: async (ownerID: string, context: string, decisionID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerID' is not null or undefined
            assertParamExists('getPolicyBundleForDecision', 'ownerID', ownerID)
            // verify required parameter 'context' is not null or undefined
            assertParamExists('getPolicyBundleForDecision', 'context', context)
            // verify required parameter 'decisionID' is not null or undefined
            assertParamExists('getPolicyBundleForDecision', 'decisionID', decisionID)
            const localVarPath = `/owner/{ownerID}/context/{context}/decision/{decisionID}/policy-bundle`
                .replace(`{${"ownerID"}}`, encodeURIComponent(String(ownerID !== undefined ? ownerID : `-ownerID-`)))
                .replace(`{${"context"}}`, encodeURIComponent(String(context !== undefined ? context : `-context-`)))
                .replace(`{${"decisionID"}}`, encodeURIComponent(String(decisionID !== undefined ? decisionID : `-decisionID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/owner/{ownerID}/context/{context}/decision/{decisionID}/policy-bundle',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows modifying decision settings (eg enable/disable policy evaluation)
         * @summary Set the decision settings
         * @param {string} ownerID 
         * @param {string} context 
         * @param {DecisionSettings} [decisionSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDecisionSettings: async (ownerID: string, context: string, decisionSettings?: DecisionSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerID' is not null or undefined
            assertParamExists('modifyDecisionSettings', 'ownerID', ownerID)
            // verify required parameter 'context' is not null or undefined
            assertParamExists('modifyDecisionSettings', 'context', context)
            const localVarPath = `/owner/{ownerID}/context/{context}/decision/settings`
                .replace(`{${"ownerID"}}`, encodeURIComponent(String(ownerID !== undefined ? ownerID : `-ownerID-`)))
                .replace(`{${"context"}}`, encodeURIComponent(String(context !== undefined ? context : `-context-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: decisionSettings,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/owner/{ownerID}/context/{context}/decision/settings',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(decisionSettings, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PolicyManagementApi - functional programming interface
 * @export
 */
export const PolicyManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PolicyManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint replaces the current policy bundle with the provided policy bundle
         * @summary Creates policy bundle for the context
         * @param {PolicyManagementApiCreatePolicyBundleForContextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPolicyBundleForContext(requestParameters: PolicyManagementApiCreatePolicyBundleForContextRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BundleDiff>> {
            const bundlePayload: BundlePayload = {
                policies: requestParameters.policies
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPolicyBundleForContext(requestParameters.ownerID, requestParameters.context, requestParameters.dry, bundlePayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will evaluate input data (config+metadata) against owner\'s stored policies and return a decision.
         * @summary Makes a decision
         * @param {PolicyManagementApiEvaluateInputDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateInputData(requestParameters: PolicyManagementApiEvaluateInputDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Decision>> {
            const policyManagementEvaluateInputDataRequest: PolicyManagementEvaluateInputDataRequest = {
                input: requestParameters.input,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluateInputData(requestParameters.ownerID, requestParameters.context, policyManagementEvaluateInputDataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will retrieve a decision for a given decision log ID
         * @summary Retrieves the owner\'s decision audit log by given decisionID
         * @param {PolicyManagementApiGetDecisionAuditLogByGivenIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionAuditLogByGivenId(requestParameters: PolicyManagementApiGetDecisionAuditLogByGivenIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecisionLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDecisionAuditLogByGivenId(requestParameters.ownerID, requestParameters.context, requestParameters.decisionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will return a list of decision audit logs that were made using this owner\'s policies.
         * @summary Retrieves the owner\'s decision audit logs.
         * @param {PolicyManagementApiGetDecisionAuditLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionAuditLogs(requestParameters: PolicyManagementApiGetDecisionAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DecisionLog>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDecisionAuditLogs(requestParameters.ownerID, requestParameters.context, requestParameters.status, requestParameters.after, requestParameters.before, requestParameters.branch, requestParameters.projectId, requestParameters.buildNumber, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint retrieves the current decision settings (eg enable/disable policy evaluation)
         * @summary Get the decision settings
         * @param {PolicyManagementApiGetDecisionSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionSettings(requestParameters: PolicyManagementApiGetDecisionSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecisionSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDecisionSettings(requestParameters.ownerID, requestParameters.context, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will retrieve a policy document.
         * @summary Retrieves a policy document
         * @param {PolicyManagementApiGetDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocument(requestParameters: PolicyManagementApiGetDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocument(requestParameters.ownerID, requestParameters.context, requestParameters.policyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will retrieve a policy bundle
         * @summary Retrieves Policy Bundle
         * @param {PolicyManagementApiGetPolicyBundleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicyBundle(requestParameters: PolicyManagementApiGetPolicyBundleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<Policy>; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyBundle(requestParameters.ownerID, requestParameters.context, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will retrieve a policy bundle for a given decision log ID
         * @summary Retrieves Policy Bundle for a given decision log ID
         * @param {PolicyManagementApiGetPolicyBundleForDecisionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicyBundleForDecision(requestParameters: PolicyManagementApiGetPolicyBundleForDecisionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<Policy>; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyBundleForDecision(requestParameters.ownerID, requestParameters.context, requestParameters.decisionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows modifying decision settings (eg enable/disable policy evaluation)
         * @summary Set the decision settings
         * @param {PolicyManagementApiModifyDecisionSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDecisionSettings(requestParameters: PolicyManagementApiModifyDecisionSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecisionSettings>> {
            const decisionSettings: DecisionSettings = {
                enabled: requestParameters.enabled
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDecisionSettings(requestParameters.ownerID, requestParameters.context, decisionSettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PolicyManagementApi - factory interface
 * @export
 */
export const PolicyManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PolicyManagementApiFp(configuration)
    return {
        /**
         * This endpoint replaces the current policy bundle with the provided policy bundle
         * @summary Creates policy bundle for the context
         * @param {PolicyManagementApiCreatePolicyBundleForContextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicyBundleForContext(requestParameters: PolicyManagementApiCreatePolicyBundleForContextRequest, options?: AxiosRequestConfig): AxiosPromise<BundleDiff> {
            return localVarFp.createPolicyBundleForContext(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will evaluate input data (config+metadata) against owner\'s stored policies and return a decision.
         * @summary Makes a decision
         * @param {PolicyManagementApiEvaluateInputDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateInputData(requestParameters: PolicyManagementApiEvaluateInputDataRequest, options?: AxiosRequestConfig): AxiosPromise<Decision> {
            return localVarFp.evaluateInputData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will retrieve a decision for a given decision log ID
         * @summary Retrieves the owner\'s decision audit log by given decisionID
         * @param {PolicyManagementApiGetDecisionAuditLogByGivenIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionAuditLogByGivenId(requestParameters: PolicyManagementApiGetDecisionAuditLogByGivenIdRequest, options?: AxiosRequestConfig): AxiosPromise<DecisionLog> {
            return localVarFp.getDecisionAuditLogByGivenId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will return a list of decision audit logs that were made using this owner\'s policies.
         * @summary Retrieves the owner\'s decision audit logs.
         * @param {PolicyManagementApiGetDecisionAuditLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionAuditLogs(requestParameters: PolicyManagementApiGetDecisionAuditLogsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<DecisionLog>> {
            return localVarFp.getDecisionAuditLogs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves the current decision settings (eg enable/disable policy evaluation)
         * @summary Get the decision settings
         * @param {PolicyManagementApiGetDecisionSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionSettings(requestParameters: PolicyManagementApiGetDecisionSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<DecisionSettings> {
            return localVarFp.getDecisionSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will retrieve a policy document.
         * @summary Retrieves a policy document
         * @param {PolicyManagementApiGetDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocument(requestParameters: PolicyManagementApiGetDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<Policy> {
            return localVarFp.getDocument(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will retrieve a policy bundle
         * @summary Retrieves Policy Bundle
         * @param {PolicyManagementApiGetPolicyBundleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyBundle(requestParameters: PolicyManagementApiGetPolicyBundleRequest, options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: Array<Policy>; }> {
            return localVarFp.getPolicyBundle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will retrieve a policy bundle for a given decision log ID
         * @summary Retrieves Policy Bundle for a given decision log ID
         * @param {PolicyManagementApiGetPolicyBundleForDecisionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyBundleForDecision(requestParameters: PolicyManagementApiGetPolicyBundleForDecisionRequest, options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: Array<Policy>; }> {
            return localVarFp.getPolicyBundleForDecision(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows modifying decision settings (eg enable/disable policy evaluation)
         * @summary Set the decision settings
         * @param {PolicyManagementApiModifyDecisionSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDecisionSettings(requestParameters: PolicyManagementApiModifyDecisionSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<DecisionSettings> {
            return localVarFp.modifyDecisionSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPolicyBundleForContext operation in PolicyManagementApi.
 * @export
 * @interface PolicyManagementApiCreatePolicyBundleForContextRequest
 */
export type PolicyManagementApiCreatePolicyBundleForContextRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiCreatePolicyBundleForContext
    */
    readonly ownerID: string
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiCreatePolicyBundleForContext
    */
    readonly context: string
    
    /**
    * 
    * @type {boolean}
    * @memberof PolicyManagementApiCreatePolicyBundleForContext
    */
    readonly dry?: boolean
    
} & BundlePayload

/**
 * Request parameters for evaluateInputData operation in PolicyManagementApi.
 * @export
 * @interface PolicyManagementApiEvaluateInputDataRequest
 */
export type PolicyManagementApiEvaluateInputDataRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiEvaluateInputData
    */
    readonly ownerID: string
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiEvaluateInputData
    */
    readonly context: string
    
} & PolicyManagementEvaluateInputDataRequest

/**
 * Request parameters for getDecisionAuditLogByGivenId operation in PolicyManagementApi.
 * @export
 * @interface PolicyManagementApiGetDecisionAuditLogByGivenIdRequest
 */
export type PolicyManagementApiGetDecisionAuditLogByGivenIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionAuditLogByGivenId
    */
    readonly ownerID: string
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionAuditLogByGivenId
    */
    readonly context: string
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionAuditLogByGivenId
    */
    readonly decisionID: string
    
}

/**
 * Request parameters for getDecisionAuditLogs operation in PolicyManagementApi.
 * @export
 * @interface PolicyManagementApiGetDecisionAuditLogsRequest
 */
export type PolicyManagementApiGetDecisionAuditLogsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionAuditLogs
    */
    readonly ownerID: string
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionAuditLogs
    */
    readonly context: string
    
    /**
    * Return decisions matching this decision status.
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionAuditLogs
    */
    readonly status?: string
    
    /**
    * Return decisions made after this date.
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionAuditLogs
    */
    readonly after?: string
    
    /**
    * Return decisions made before this date.
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionAuditLogs
    */
    readonly before?: string
    
    /**
    * Return decisions made on this branch.
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionAuditLogs
    */
    readonly branch?: string
    
    /**
    * Return decisions made for this project.
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionAuditLogs
    */
    readonly projectId?: string
    
    /**
    * Return decisions made for this build number.
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionAuditLogs
    */
    readonly buildNumber?: string
    
    /**
    * Sets the offset when retrieving the decisions, for paging.
    * @type {number}
    * @memberof PolicyManagementApiGetDecisionAuditLogs
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getDecisionSettings operation in PolicyManagementApi.
 * @export
 * @interface PolicyManagementApiGetDecisionSettingsRequest
 */
export type PolicyManagementApiGetDecisionSettingsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionSettings
    */
    readonly ownerID: string
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetDecisionSettings
    */
    readonly context: string
    
}

/**
 * Request parameters for getDocument operation in PolicyManagementApi.
 * @export
 * @interface PolicyManagementApiGetDocumentRequest
 */
export type PolicyManagementApiGetDocumentRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetDocument
    */
    readonly ownerID: string
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetDocument
    */
    readonly context: string
    
    /**
    * the policy name set by the rego policy_name rule
    * @type {string}
    * @memberof PolicyManagementApiGetDocument
    */
    readonly policyName: string
    
}

/**
 * Request parameters for getPolicyBundle operation in PolicyManagementApi.
 * @export
 * @interface PolicyManagementApiGetPolicyBundleRequest
 */
export type PolicyManagementApiGetPolicyBundleRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetPolicyBundle
    */
    readonly ownerID: string
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetPolicyBundle
    */
    readonly context: string
    
}

/**
 * Request parameters for getPolicyBundleForDecision operation in PolicyManagementApi.
 * @export
 * @interface PolicyManagementApiGetPolicyBundleForDecisionRequest
 */
export type PolicyManagementApiGetPolicyBundleForDecisionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetPolicyBundleForDecision
    */
    readonly ownerID: string
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetPolicyBundleForDecision
    */
    readonly context: string
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiGetPolicyBundleForDecision
    */
    readonly decisionID: string
    
}

/**
 * Request parameters for modifyDecisionSettings operation in PolicyManagementApi.
 * @export
 * @interface PolicyManagementApiModifyDecisionSettingsRequest
 */
export type PolicyManagementApiModifyDecisionSettingsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiModifyDecisionSettings
    */
    readonly ownerID: string
    
    /**
    * 
    * @type {string}
    * @memberof PolicyManagementApiModifyDecisionSettings
    */
    readonly context: string
    
} & DecisionSettings

/**
 * PolicyManagementApiGenerated - object-oriented interface
 * @export
 * @class PolicyManagementApiGenerated
 * @extends {BaseAPI}
 */
export class PolicyManagementApiGenerated extends BaseAPI {
    /**
     * This endpoint replaces the current policy bundle with the provided policy bundle
     * @summary Creates policy bundle for the context
     * @param {PolicyManagementApiCreatePolicyBundleForContextRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyManagementApiGenerated
     */
    public createPolicyBundleForContext(requestParameters: PolicyManagementApiCreatePolicyBundleForContextRequest, options?: AxiosRequestConfig) {
        return PolicyManagementApiFp(this.configuration).createPolicyBundleForContext(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will evaluate input data (config+metadata) against owner\'s stored policies and return a decision.
     * @summary Makes a decision
     * @param {PolicyManagementApiEvaluateInputDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyManagementApiGenerated
     */
    public evaluateInputData(requestParameters: PolicyManagementApiEvaluateInputDataRequest, options?: AxiosRequestConfig) {
        return PolicyManagementApiFp(this.configuration).evaluateInputData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will retrieve a decision for a given decision log ID
     * @summary Retrieves the owner\'s decision audit log by given decisionID
     * @param {PolicyManagementApiGetDecisionAuditLogByGivenIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyManagementApiGenerated
     */
    public getDecisionAuditLogByGivenId(requestParameters: PolicyManagementApiGetDecisionAuditLogByGivenIdRequest, options?: AxiosRequestConfig) {
        return PolicyManagementApiFp(this.configuration).getDecisionAuditLogByGivenId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will return a list of decision audit logs that were made using this owner\'s policies.
     * @summary Retrieves the owner\'s decision audit logs.
     * @param {PolicyManagementApiGetDecisionAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyManagementApiGenerated
     */
    public getDecisionAuditLogs(requestParameters: PolicyManagementApiGetDecisionAuditLogsRequest, options?: AxiosRequestConfig) {
        return PolicyManagementApiFp(this.configuration).getDecisionAuditLogs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint retrieves the current decision settings (eg enable/disable policy evaluation)
     * @summary Get the decision settings
     * @param {PolicyManagementApiGetDecisionSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyManagementApiGenerated
     */
    public getDecisionSettings(requestParameters: PolicyManagementApiGetDecisionSettingsRequest, options?: AxiosRequestConfig) {
        return PolicyManagementApiFp(this.configuration).getDecisionSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will retrieve a policy document.
     * @summary Retrieves a policy document
     * @param {PolicyManagementApiGetDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyManagementApiGenerated
     */
    public getDocument(requestParameters: PolicyManagementApiGetDocumentRequest, options?: AxiosRequestConfig) {
        return PolicyManagementApiFp(this.configuration).getDocument(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will retrieve a policy bundle
     * @summary Retrieves Policy Bundle
     * @param {PolicyManagementApiGetPolicyBundleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyManagementApiGenerated
     */
    public getPolicyBundle(requestParameters: PolicyManagementApiGetPolicyBundleRequest, options?: AxiosRequestConfig) {
        return PolicyManagementApiFp(this.configuration).getPolicyBundle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will retrieve a policy bundle for a given decision log ID
     * @summary Retrieves Policy Bundle for a given decision log ID
     * @param {PolicyManagementApiGetPolicyBundleForDecisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyManagementApiGenerated
     */
    public getPolicyBundleForDecision(requestParameters: PolicyManagementApiGetPolicyBundleForDecisionRequest, options?: AxiosRequestConfig) {
        return PolicyManagementApiFp(this.configuration).getPolicyBundleForDecision(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows modifying decision settings (eg enable/disable policy evaluation)
     * @summary Set the decision settings
     * @param {PolicyManagementApiModifyDecisionSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyManagementApiGenerated
     */
    public modifyDecisionSettings(requestParameters: PolicyManagementApiModifyDecisionSettingsRequest, options?: AxiosRequestConfig) {
        return PolicyManagementApiFp(this.configuration).modifyDecisionSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
