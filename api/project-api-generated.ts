/* tslint:disable */
/* eslint-disable */
/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

The version of the OpenAPI document: v2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContextGetRestrictions401Response } from '../models';
// @ts-ignore
import { ContextGetRestrictions429Response } from '../models';
// @ts-ignore
import { ContextGetRestrictions500Response } from '../models';
// @ts-ignore
import { ProjectCreateCheckoutKeyRequest } from '../models';
// @ts-ignore
import { ProjectCreateCheckoutKeyResponse } from '../models';
// @ts-ignore
import { ProjectCreateCheckoutKeydefaultResponse } from '../models';
// @ts-ignore
import { ProjectCreateEnvVarRequest } from '../models';
// @ts-ignore
import { ProjectCreateEnvVarResponse } from '../models';
// @ts-ignore
import { ProjectCreateEnvVardefaultResponse } from '../models';
// @ts-ignore
import { ProjectCreateProjectDefaultSettings403Response } from '../models';
// @ts-ignore
import { ProjectCreateProjectDefaultSettings404Response } from '../models';
// @ts-ignore
import { ProjectCreateProjectDefaultSettings405Response } from '../models';
// @ts-ignore
import { ProjectCreateProjectDefaultSettingsResponse } from '../models';
// @ts-ignore
import { ProjectDeleteCheckoutKeyByFingerprintResponse } from '../models';
// @ts-ignore
import { ProjectDeleteCheckoutKeyByFingerprintdefaultResponse } from '../models';
// @ts-ignore
import { ProjectDeleteEnvironmentVariableResponse } from '../models';
// @ts-ignore
import { ProjectDeleteEnvironmentVariabledefaultResponse } from '../models';
// @ts-ignore
import { ProjectGetBySlugResponse } from '../models';
// @ts-ignore
import { ProjectGetBySlugdefaultResponse } from '../models';
// @ts-ignore
import { ProjectGetCheckoutKeyByFingerprintResponse } from '../models';
// @ts-ignore
import { ProjectGetCheckoutKeyByFingerprintdefaultResponse } from '../models';
// @ts-ignore
import { ProjectGetMaskedEnvVarResponse } from '../models';
// @ts-ignore
import { ProjectGetMaskedEnvVardefaultResponse } from '../models';
// @ts-ignore
import { ProjectGetSettingsResponse } from '../models';
// @ts-ignore
import { ProjectListCheckoutKeysResponse } from '../models';
// @ts-ignore
import { ProjectListCheckoutKeysdefaultResponse } from '../models';
// @ts-ignore
import { ProjectListEnvVarValuesResponse } from '../models';
// @ts-ignore
import { ProjectListEnvVarValuesdefaultResponse } from '../models';
// @ts-ignore
import { ProjectSettings } from '../models';
// @ts-ignore
import { ProjectSettingsAdvanced } from '../models';
// @ts-ignore
import { ProjectUpdateSettingsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Not available to projects that use GitLab or GitHub App. Creates a new checkout key. This API request is only usable with a user API token.                            Please ensure that you have authorized your account with GitHub before creating user keys.                            This is necessary to give CircleCI the permission to create a user key associated with                            your GitHub user account. You can find this page by visiting Project Settings > Checkout SSH Keys
         * @summary Create a new checkout key
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {ProjectCreateCheckoutKeyRequest} [projectCreateCheckoutKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutKey: async (projectSlug: string, projectCreateCheckoutKeyRequest?: ProjectCreateCheckoutKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('createCheckoutKey', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/checkout-key`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectCreateCheckoutKeyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/checkout-key',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectCreateCheckoutKeyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new environment variable.
         * @summary Create an environment variable
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {ProjectCreateEnvVarRequest} [projectCreateEnvVarRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvVar: async (projectSlug: string, projectCreateEnvVarRequest?: ProjectCreateEnvVarRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('createEnvVar', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/envvar`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectCreateEnvVarRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/envvar',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectCreateEnvVarRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [__EXPERIMENTAL__]  Creates a new CircleCI project, and returns a list of the default advanced settings. Can only be called on a repo with a main branch and an existing config.yml file. Not yet available to projects that use GitLab or GitHub App.
         * @summary 🧪 Create a project
         * @param {string} provider The &#x60;provider&#x60; segment of a project or org slug, the first of the three. This may be a VCS. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60;.
         * @param {string} organization The &#x60;organization&#x60; segment of a project or org slug, the second of the three. For GitHub OAuth or Bitbucket projects, this is the organization name. For projects that use GitLab or GitHub App, use the organization ID (found in Organization Settings).
         * @param {string} project The &#x60;project&#x60; segment of a project slug, the third of the three. For GitHub OAuth or Bitbucket projects, this is the repository name. For projects that use GitLab or GitHub App, use the project ID (found in Project Settings).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectDefaultSettings: async (provider: string, organization: string, project: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('createProjectDefaultSettings', 'provider', provider)
            // verify required parameter 'organization' is not null or undefined
            assertParamExists('createProjectDefaultSettings', 'organization', organization)
            // verify required parameter 'project' is not null or undefined
            assertParamExists('createProjectDefaultSettings', 'project', project)
            const localVarPath = `/project/{provider}/{organization}/{project}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider !== undefined ? provider : `-provider-`)))
                .replace(`{${"organization"}}`, encodeURIComponent(String(organization !== undefined ? organization : `-organization-`)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{provider}/{organization}/{project}',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.
         * @summary Delete a checkout key
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} fingerprint An SSH key fingerprint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCheckoutKeyByFingerprint: async (projectSlug: string, fingerprint: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('deleteCheckoutKeyByFingerprint', 'projectSlug', projectSlug)
            // verify required parameter 'fingerprint' is not null or undefined
            assertParamExists('deleteCheckoutKeyByFingerprint', 'fingerprint', fingerprint)
            const localVarPath = `/project/{project-slug}/checkout-key/{fingerprint}`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)))
                .replace(`{${"fingerprint"}}`, encodeURIComponent(String(fingerprint !== undefined ? fingerprint : `-fingerprint-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/checkout-key/{fingerprint}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the environment variable named :name.
         * @summary Delete an environment variable
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} name The name of the environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironmentVariable: async (projectSlug: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('deleteEnvironmentVariable', 'projectSlug', projectSlug)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteEnvironmentVariable', 'name', name)
            const localVarPath = `/project/{project-slug}/envvar/{name}`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name !== undefined ? name : `-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/envvar/{name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a project by project slug.
         * @summary Get a project
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBySlug: async (projectSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getBySlug', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an individual checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.
         * @summary Get a checkout key
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} fingerprint An SSH key fingerprint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckoutKeyByFingerprint: async (projectSlug: string, fingerprint: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getCheckoutKeyByFingerprint', 'projectSlug', projectSlug)
            // verify required parameter 'fingerprint' is not null or undefined
            assertParamExists('getCheckoutKeyByFingerprint', 'fingerprint', fingerprint)
            const localVarPath = `/project/{project-slug}/checkout-key/{fingerprint}`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)))
                .replace(`{${"fingerprint"}}`, encodeURIComponent(String(fingerprint !== undefined ? fingerprint : `-fingerprint-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/checkout-key/{fingerprint}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the masked value of environment variable :name.
         * @summary Get a masked environment variable
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} name The name of the environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaskedEnvVar: async (projectSlug: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getMaskedEnvVar', 'projectSlug', projectSlug)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getMaskedEnvVar', 'name', name)
            const localVarPath = `/project/{project-slug}/envvar/{name}`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name !== undefined ? name : `-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/envvar/{name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [__EXPERIMENTAL__] Returns a list of the advanced settings for a CircleCI project, whether enabled (true) or not (false).
         * @summary 🧪 Get project settings
         * @param {string} provider The &#x60;provider&#x60; segment of a project or org slug, the first of the three. This may be a VCS. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60;.
         * @param {string} organization The &#x60;organization&#x60; segment of a project or org slug, the second of the three. For GitHub OAuth or Bitbucket projects, this is the organization name. For projects that use GitLab or GitHub App, use the organization ID (found in Organization Settings).
         * @param {string} project The &#x60;project&#x60; segment of a project slug, the third of the three. For GitHub OAuth or Bitbucket projects, this is the repository name. For projects that use GitLab or GitHub App, use the project ID (found in Project Settings).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings: async (provider: string, organization: string, project: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('getSettings', 'provider', provider)
            // verify required parameter 'organization' is not null or undefined
            assertParamExists('getSettings', 'organization', organization)
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getSettings', 'project', project)
            const localVarPath = `/project/{provider}/{organization}/{project}/settings`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider !== undefined ? provider : `-provider-`)))
                .replace(`{${"organization"}}`, encodeURIComponent(String(organization !== undefined ? organization : `-organization-`)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{provider}/{organization}/{project}/settings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a sequence of checkout keys for `:project`.
         * @summary Get all checkout keys
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {'sha256' | 'md5'} [digest] The fingerprint digest type to return. This may be either &#x60;md5&#x60; or &#x60;sha256&#x60;. If not passed, defaults to &#x60;md5&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCheckoutKeys: async (projectSlug: string, digest?: 'sha256' | 'md5', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('listCheckoutKeys', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/checkout-key`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (digest !== undefined) {
                localVarQueryParameter['digest'] = digest;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/checkout-key',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns four \'x\' characters, in addition to the last four ASCII characters of the value, consistent with the display of environment variable values on the CircleCI website.
         * @summary List all environment variables
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvVarValues: async (projectSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('listEnvVarValues', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/envvar`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/envvar',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [__EXPERIMENTAL__] Updates one or more of the advanced settings for a CircleCI project.
         * @summary 🧪 Update project settings
         * @param {string} provider The &#x60;provider&#x60; segment of a project or org slug, the first of the three. This may be a VCS. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60;.
         * @param {string} organization The &#x60;organization&#x60; segment of a project or org slug, the second of the three. For GitHub OAuth or Bitbucket projects, this is the organization name. For projects that use GitLab or GitHub App, use the organization ID (found in Organization Settings).
         * @param {string} project The &#x60;project&#x60; segment of a project slug, the third of the three. For GitHub OAuth or Bitbucket projects, this is the repository name. For projects that use GitLab or GitHub App, use the project ID (found in Project Settings).
         * @param {ProjectSettings} projectSettings The setting(s) to update, including one or more fields in the JSON object. Note that &#x60;oss: true&#x60; will only be set on projects whose underlying repositories are actually open source.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings: async (provider: string, organization: string, project: string, projectSettings: ProjectSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('updateSettings', 'provider', provider)
            // verify required parameter 'organization' is not null or undefined
            assertParamExists('updateSettings', 'organization', organization)
            // verify required parameter 'project' is not null or undefined
            assertParamExists('updateSettings', 'project', project)
            // verify required parameter 'projectSettings' is not null or undefined
            assertParamExists('updateSettings', 'projectSettings', projectSettings)
            const localVarPath = `/project/{provider}/{organization}/{project}/settings`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider !== undefined ? provider : `-provider-`)))
                .replace(`{${"organization"}}`, encodeURIComponent(String(organization !== undefined ? organization : `-organization-`)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectSettings,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{provider}/{organization}/{project}/settings',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectSettings, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Not available to projects that use GitLab or GitHub App. Creates a new checkout key. This API request is only usable with a user API token.                            Please ensure that you have authorized your account with GitHub before creating user keys.                            This is necessary to give CircleCI the permission to create a user key associated with                            your GitHub user account. You can find this page by visiting Project Settings > Checkout SSH Keys
         * @summary Create a new checkout key
         * @param {ProjectApiCreateCheckoutKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCheckoutKey(requestParameters: ProjectApiCreateCheckoutKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectCreateCheckoutKeyResponse>> {
            const projectCreateCheckoutKeyRequest: ProjectCreateCheckoutKeyRequest = {
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCheckoutKey(requestParameters.projectSlug, projectCreateCheckoutKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new environment variable.
         * @summary Create an environment variable
         * @param {ProjectApiCreateEnvVarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnvVar(requestParameters: ProjectApiCreateEnvVarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectCreateEnvVarResponse>> {
            const projectCreateEnvVarRequest: ProjectCreateEnvVarRequest = {
                name: requestParameters.name,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEnvVar(requestParameters.projectSlug, projectCreateEnvVarRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * [__EXPERIMENTAL__]  Creates a new CircleCI project, and returns a list of the default advanced settings. Can only be called on a repo with a main branch and an existing config.yml file. Not yet available to projects that use GitLab or GitHub App.
         * @summary 🧪 Create a project
         * @param {ProjectApiCreateProjectDefaultSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectDefaultSettings(requestParameters: ProjectApiCreateProjectDefaultSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectDefaultSettings(requestParameters.provider, requestParameters.organization, requestParameters.project, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.
         * @summary Delete a checkout key
         * @param {ProjectApiDeleteCheckoutKeyByFingerprintRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCheckoutKeyByFingerprint(requestParameters: ProjectApiDeleteCheckoutKeyByFingerprintRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDeleteCheckoutKeyByFingerprintResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCheckoutKeyByFingerprint(requestParameters.projectSlug, requestParameters.fingerprint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the environment variable named :name.
         * @summary Delete an environment variable
         * @param {ProjectApiDeleteEnvironmentVariableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEnvironmentVariable(requestParameters: ProjectApiDeleteEnvironmentVariableRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDeleteEnvironmentVariableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEnvironmentVariable(requestParameters.projectSlug, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a project by project slug.
         * @summary Get a project
         * @param {ProjectApiGetBySlugRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBySlug(requestParameters: ProjectApiGetBySlugRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectGetBySlugResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBySlug(requestParameters.projectSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns an individual checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.
         * @summary Get a checkout key
         * @param {ProjectApiGetCheckoutKeyByFingerprintRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckoutKeyByFingerprint(requestParameters: ProjectApiGetCheckoutKeyByFingerprintRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectGetCheckoutKeyByFingerprintResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckoutKeyByFingerprint(requestParameters.projectSlug, requestParameters.fingerprint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the masked value of environment variable :name.
         * @summary Get a masked environment variable
         * @param {ProjectApiGetMaskedEnvVarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMaskedEnvVar(requestParameters: ProjectApiGetMaskedEnvVarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectGetMaskedEnvVarResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaskedEnvVar(requestParameters.projectSlug, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * [__EXPERIMENTAL__] Returns a list of the advanced settings for a CircleCI project, whether enabled (true) or not (false).
         * @summary 🧪 Get project settings
         * @param {ProjectApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettings(requestParameters: ProjectApiGetSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettings(requestParameters.provider, requestParameters.organization, requestParameters.project, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a sequence of checkout keys for `:project`.
         * @summary Get all checkout keys
         * @param {ProjectApiListCheckoutKeysRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCheckoutKeys(requestParameters: ProjectApiListCheckoutKeysRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectListCheckoutKeysResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCheckoutKeys(requestParameters.projectSlug, requestParameters.digest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns four \'x\' characters, in addition to the last four ASCII characters of the value, consistent with the display of environment variable values on the CircleCI website.
         * @summary List all environment variables
         * @param {ProjectApiListEnvVarValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEnvVarValues(requestParameters: ProjectApiListEnvVarValuesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectListEnvVarValuesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEnvVarValues(requestParameters.projectSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * [__EXPERIMENTAL__] Updates one or more of the advanced settings for a CircleCI project.
         * @summary 🧪 Update project settings
         * @param {ProjectApiUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSettings(requestParameters: ProjectApiUpdateSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSettings>> {
            const projectSettings: ProjectSettings = {
                advanced: requestParameters.advanced
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSettings(requestParameters.provider, requestParameters.organization, requestParameters.project, projectSettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * Not available to projects that use GitLab or GitHub App. Creates a new checkout key. This API request is only usable with a user API token.                            Please ensure that you have authorized your account with GitHub before creating user keys.                            This is necessary to give CircleCI the permission to create a user key associated with                            your GitHub user account. You can find this page by visiting Project Settings > Checkout SSH Keys
         * @summary Create a new checkout key
         * @param {ProjectApiCreateCheckoutKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutKey(requestParameters: ProjectApiCreateCheckoutKeyRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectCreateCheckoutKeyResponse> {
            return localVarFp.createCheckoutKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new environment variable.
         * @summary Create an environment variable
         * @param {ProjectApiCreateEnvVarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvVar(requestParameters: ProjectApiCreateEnvVarRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectCreateEnvVarResponse> {
            return localVarFp.createEnvVar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * [__EXPERIMENTAL__]  Creates a new CircleCI project, and returns a list of the default advanced settings. Can only be called on a repo with a main branch and an existing config.yml file. Not yet available to projects that use GitLab or GitHub App.
         * @summary 🧪 Create a project
         * @param {ProjectApiCreateProjectDefaultSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectDefaultSettings(requestParameters: ProjectApiCreateProjectDefaultSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectSettings> {
            return localVarFp.createProjectDefaultSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.
         * @summary Delete a checkout key
         * @param {ProjectApiDeleteCheckoutKeyByFingerprintRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCheckoutKeyByFingerprint(requestParameters: ProjectApiDeleteCheckoutKeyByFingerprintRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectDeleteCheckoutKeyByFingerprintResponse> {
            return localVarFp.deleteCheckoutKeyByFingerprint(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the environment variable named :name.
         * @summary Delete an environment variable
         * @param {ProjectApiDeleteEnvironmentVariableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironmentVariable(requestParameters: ProjectApiDeleteEnvironmentVariableRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectDeleteEnvironmentVariableResponse> {
            return localVarFp.deleteEnvironmentVariable(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a project by project slug.
         * @summary Get a project
         * @param {ProjectApiGetBySlugRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBySlug(requestParameters: ProjectApiGetBySlugRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectGetBySlugResponse> {
            return localVarFp.getBySlug(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an individual checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.
         * @summary Get a checkout key
         * @param {ProjectApiGetCheckoutKeyByFingerprintRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckoutKeyByFingerprint(requestParameters: ProjectApiGetCheckoutKeyByFingerprintRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectGetCheckoutKeyByFingerprintResponse> {
            return localVarFp.getCheckoutKeyByFingerprint(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the masked value of environment variable :name.
         * @summary Get a masked environment variable
         * @param {ProjectApiGetMaskedEnvVarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaskedEnvVar(requestParameters: ProjectApiGetMaskedEnvVarRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectGetMaskedEnvVarResponse> {
            return localVarFp.getMaskedEnvVar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * [__EXPERIMENTAL__] Returns a list of the advanced settings for a CircleCI project, whether enabled (true) or not (false).
         * @summary 🧪 Get project settings
         * @param {ProjectApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(requestParameters: ProjectApiGetSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectSettings> {
            return localVarFp.getSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a sequence of checkout keys for `:project`.
         * @summary Get all checkout keys
         * @param {ProjectApiListCheckoutKeysRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCheckoutKeys(requestParameters: ProjectApiListCheckoutKeysRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectListCheckoutKeysResponse> {
            return localVarFp.listCheckoutKeys(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns four \'x\' characters, in addition to the last four ASCII characters of the value, consistent with the display of environment variable values on the CircleCI website.
         * @summary List all environment variables
         * @param {ProjectApiListEnvVarValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvVarValues(requestParameters: ProjectApiListEnvVarValuesRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectListEnvVarValuesResponse> {
            return localVarFp.listEnvVarValues(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * [__EXPERIMENTAL__] Updates one or more of the advanced settings for a CircleCI project.
         * @summary 🧪 Update project settings
         * @param {ProjectApiUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings(requestParameters: ProjectApiUpdateSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectSettings> {
            return localVarFp.updateSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCheckoutKey operation in ProjectApi.
 * @export
 * @interface ProjectApiCreateCheckoutKeyRequest
 */
export type ProjectApiCreateCheckoutKeyRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof ProjectApiCreateCheckoutKey
    */
    readonly projectSlug: string
    
} & ProjectCreateCheckoutKeyRequest

/**
 * Request parameters for createEnvVar operation in ProjectApi.
 * @export
 * @interface ProjectApiCreateEnvVarRequest
 */
export type ProjectApiCreateEnvVarRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof ProjectApiCreateEnvVar
    */
    readonly projectSlug: string
    
} & ProjectCreateEnvVarRequest

/**
 * Request parameters for createProjectDefaultSettings operation in ProjectApi.
 * @export
 * @interface ProjectApiCreateProjectDefaultSettingsRequest
 */
export type ProjectApiCreateProjectDefaultSettingsRequest = {
    
    /**
    * The `provider` segment of a project or org slug, the first of the three. This may be a VCS. For projects that use GitLab or GitHub App, use `circleci`.
    * @type {string}
    * @memberof ProjectApiCreateProjectDefaultSettings
    */
    readonly provider: string
    
    /**
    * The `organization` segment of a project or org slug, the second of the three. For GitHub OAuth or Bitbucket projects, this is the organization name. For projects that use GitLab or GitHub App, use the organization ID (found in Organization Settings).
    * @type {string}
    * @memberof ProjectApiCreateProjectDefaultSettings
    */
    readonly organization: string
    
    /**
    * The `project` segment of a project slug, the third of the three. For GitHub OAuth or Bitbucket projects, this is the repository name. For projects that use GitLab or GitHub App, use the project ID (found in Project Settings).
    * @type {string}
    * @memberof ProjectApiCreateProjectDefaultSettings
    */
    readonly project: string
    
}

/**
 * Request parameters for deleteCheckoutKeyByFingerprint operation in ProjectApi.
 * @export
 * @interface ProjectApiDeleteCheckoutKeyByFingerprintRequest
 */
export type ProjectApiDeleteCheckoutKeyByFingerprintRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof ProjectApiDeleteCheckoutKeyByFingerprint
    */
    readonly projectSlug: string
    
    /**
    * An SSH key fingerprint.
    * @type {string}
    * @memberof ProjectApiDeleteCheckoutKeyByFingerprint
    */
    readonly fingerprint: string
    
}

/**
 * Request parameters for deleteEnvironmentVariable operation in ProjectApi.
 * @export
 * @interface ProjectApiDeleteEnvironmentVariableRequest
 */
export type ProjectApiDeleteEnvironmentVariableRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof ProjectApiDeleteEnvironmentVariable
    */
    readonly projectSlug: string
    
    /**
    * The name of the environment variable.
    * @type {string}
    * @memberof ProjectApiDeleteEnvironmentVariable
    */
    readonly name: string
    
}

/**
 * Request parameters for getBySlug operation in ProjectApi.
 * @export
 * @interface ProjectApiGetBySlugRequest
 */
export type ProjectApiGetBySlugRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof ProjectApiGetBySlug
    */
    readonly projectSlug: string
    
}

/**
 * Request parameters for getCheckoutKeyByFingerprint operation in ProjectApi.
 * @export
 * @interface ProjectApiGetCheckoutKeyByFingerprintRequest
 */
export type ProjectApiGetCheckoutKeyByFingerprintRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof ProjectApiGetCheckoutKeyByFingerprint
    */
    readonly projectSlug: string
    
    /**
    * An SSH key fingerprint.
    * @type {string}
    * @memberof ProjectApiGetCheckoutKeyByFingerprint
    */
    readonly fingerprint: string
    
}

/**
 * Request parameters for getMaskedEnvVar operation in ProjectApi.
 * @export
 * @interface ProjectApiGetMaskedEnvVarRequest
 */
export type ProjectApiGetMaskedEnvVarRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof ProjectApiGetMaskedEnvVar
    */
    readonly projectSlug: string
    
    /**
    * The name of the environment variable.
    * @type {string}
    * @memberof ProjectApiGetMaskedEnvVar
    */
    readonly name: string
    
}

/**
 * Request parameters for getSettings operation in ProjectApi.
 * @export
 * @interface ProjectApiGetSettingsRequest
 */
export type ProjectApiGetSettingsRequest = {
    
    /**
    * The `provider` segment of a project or org slug, the first of the three. This may be a VCS. For projects that use GitLab or GitHub App, use `circleci`.
    * @type {string}
    * @memberof ProjectApiGetSettings
    */
    readonly provider: string
    
    /**
    * The `organization` segment of a project or org slug, the second of the three. For GitHub OAuth or Bitbucket projects, this is the organization name. For projects that use GitLab or GitHub App, use the organization ID (found in Organization Settings).
    * @type {string}
    * @memberof ProjectApiGetSettings
    */
    readonly organization: string
    
    /**
    * The `project` segment of a project slug, the third of the three. For GitHub OAuth or Bitbucket projects, this is the repository name. For projects that use GitLab or GitHub App, use the project ID (found in Project Settings).
    * @type {string}
    * @memberof ProjectApiGetSettings
    */
    readonly project: string
    
}

/**
 * Request parameters for listCheckoutKeys operation in ProjectApi.
 * @export
 * @interface ProjectApiListCheckoutKeysRequest
 */
export type ProjectApiListCheckoutKeysRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof ProjectApiListCheckoutKeys
    */
    readonly projectSlug: string
    
    /**
    * The fingerprint digest type to return. This may be either `md5` or `sha256`. If not passed, defaults to `md5`.
    * @type {'sha256' | 'md5'}
    * @memberof ProjectApiListCheckoutKeys
    */
    readonly digest?: 'sha256' | 'md5'
    
}

/**
 * Request parameters for listEnvVarValues operation in ProjectApi.
 * @export
 * @interface ProjectApiListEnvVarValuesRequest
 */
export type ProjectApiListEnvVarValuesRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof ProjectApiListEnvVarValues
    */
    readonly projectSlug: string
    
}

/**
 * Request parameters for updateSettings operation in ProjectApi.
 * @export
 * @interface ProjectApiUpdateSettingsRequest
 */
export type ProjectApiUpdateSettingsRequest = {
    
    /**
    * The `provider` segment of a project or org slug, the first of the three. This may be a VCS. For projects that use GitLab or GitHub App, use `circleci`.
    * @type {string}
    * @memberof ProjectApiUpdateSettings
    */
    readonly provider: string
    
    /**
    * The `organization` segment of a project or org slug, the second of the three. For GitHub OAuth or Bitbucket projects, this is the organization name. For projects that use GitLab or GitHub App, use the organization ID (found in Organization Settings).
    * @type {string}
    * @memberof ProjectApiUpdateSettings
    */
    readonly organization: string
    
    /**
    * The `project` segment of a project slug, the third of the three. For GitHub OAuth or Bitbucket projects, this is the repository name. For projects that use GitLab or GitHub App, use the project ID (found in Project Settings).
    * @type {string}
    * @memberof ProjectApiUpdateSettings
    */
    readonly project: string
    
} & ProjectSettings

/**
 * ProjectApiGenerated - object-oriented interface
 * @export
 * @class ProjectApiGenerated
 * @extends {BaseAPI}
 */
export class ProjectApiGenerated extends BaseAPI {
    /**
     * Not available to projects that use GitLab or GitHub App. Creates a new checkout key. This API request is only usable with a user API token.                            Please ensure that you have authorized your account with GitHub before creating user keys.                            This is necessary to give CircleCI the permission to create a user key associated with                            your GitHub user account. You can find this page by visiting Project Settings > Checkout SSH Keys
     * @summary Create a new checkout key
     * @param {ProjectApiCreateCheckoutKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public createCheckoutKey(requestParameters: ProjectApiCreateCheckoutKeyRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).createCheckoutKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new environment variable.
     * @summary Create an environment variable
     * @param {ProjectApiCreateEnvVarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public createEnvVar(requestParameters: ProjectApiCreateEnvVarRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).createEnvVar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [__EXPERIMENTAL__]  Creates a new CircleCI project, and returns a list of the default advanced settings. Can only be called on a repo with a main branch and an existing config.yml file. Not yet available to projects that use GitLab or GitHub App.
     * @summary 🧪 Create a project
     * @param {ProjectApiCreateProjectDefaultSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public createProjectDefaultSettings(requestParameters: ProjectApiCreateProjectDefaultSettingsRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).createProjectDefaultSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.
     * @summary Delete a checkout key
     * @param {ProjectApiDeleteCheckoutKeyByFingerprintRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public deleteCheckoutKeyByFingerprint(requestParameters: ProjectApiDeleteCheckoutKeyByFingerprintRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).deleteCheckoutKeyByFingerprint(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the environment variable named :name.
     * @summary Delete an environment variable
     * @param {ProjectApiDeleteEnvironmentVariableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public deleteEnvironmentVariable(requestParameters: ProjectApiDeleteEnvironmentVariableRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).deleteEnvironmentVariable(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a project by project slug.
     * @summary Get a project
     * @param {ProjectApiGetBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public getBySlug(requestParameters: ProjectApiGetBySlugRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getBySlug(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an individual checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.
     * @summary Get a checkout key
     * @param {ProjectApiGetCheckoutKeyByFingerprintRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public getCheckoutKeyByFingerprint(requestParameters: ProjectApiGetCheckoutKeyByFingerprintRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getCheckoutKeyByFingerprint(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the masked value of environment variable :name.
     * @summary Get a masked environment variable
     * @param {ProjectApiGetMaskedEnvVarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public getMaskedEnvVar(requestParameters: ProjectApiGetMaskedEnvVarRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getMaskedEnvVar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [__EXPERIMENTAL__] Returns a list of the advanced settings for a CircleCI project, whether enabled (true) or not (false).
     * @summary 🧪 Get project settings
     * @param {ProjectApiGetSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public getSettings(requestParameters: ProjectApiGetSettingsRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a sequence of checkout keys for `:project`.
     * @summary Get all checkout keys
     * @param {ProjectApiListCheckoutKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public listCheckoutKeys(requestParameters: ProjectApiListCheckoutKeysRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).listCheckoutKeys(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns four \'x\' characters, in addition to the last four ASCII characters of the value, consistent with the display of environment variable values on the CircleCI website.
     * @summary List all environment variables
     * @param {ProjectApiListEnvVarValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public listEnvVarValues(requestParameters: ProjectApiListEnvVarValuesRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).listEnvVarValues(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [__EXPERIMENTAL__] Updates one or more of the advanced settings for a CircleCI project.
     * @summary 🧪 Update project settings
     * @param {ProjectApiUpdateSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public updateSettings(requestParameters: ProjectApiUpdateSettingsRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).updateSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
