/* tslint:disable */
/* eslint-disable */
/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

The version of the OpenAPI document: v2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PipelineContinueExecutionRequestParametersValue } from '../models';
// @ts-ignore
import { ScheduleCreateNewScheduleRequest } from '../models';
// @ts-ignore
import { ScheduleCreateNewScheduleRequestTimetable } from '../models';
// @ts-ignore
import { ScheduleCreateNewScheduleResponse } from '../models';
// @ts-ignore
import { ScheduleCreateNewScheduledefaultResponse } from '../models';
// @ts-ignore
import { ScheduleGetAllSchedulesResponse } from '../models';
// @ts-ignore
import { ScheduleGetAllSchedulesdefaultResponse } from '../models';
// @ts-ignore
import { ScheduleGetByIdResponse } from '../models';
// @ts-ignore
import { ScheduleGetByIddefaultResponse } from '../models';
// @ts-ignore
import { ScheduleRemoveByIdResponse } from '../models';
// @ts-ignore
import { ScheduleRemoveByIddefaultResponse } from '../models';
// @ts-ignore
import { ScheduleUpdateScheduleRequest } from '../models';
// @ts-ignore
import { ScheduleUpdateScheduleRequestTimetable } from '../models';
// @ts-ignore
import { ScheduleUpdateScheduleResponse } from '../models';
// @ts-ignore
import { ScheduleUpdateScheduledefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ScheduleApi - axios parameter creator
 * @export
 */
export const ScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Not yet available to projects that use GitLab or GitHub App. Creates a schedule and returns the created schedule.
         * @summary Create a schedule
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {ScheduleCreateNewScheduleRequest} [scheduleCreateNewScheduleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSchedule: async (projectSlug: string, scheduleCreateNewScheduleRequest?: ScheduleCreateNewScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('createNewSchedule', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/schedule`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: scheduleCreateNewScheduleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/schedule',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleCreateNewScheduleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all schedules for this project.
         * @summary Get all schedules
         * @param {string} projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings).
         * @param {string} [pageToken] A token to retrieve the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchedules: async (projectSlug: string, pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getAllSchedules', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project-slug}/schedule`
                .replace(`{${"project-slug"}}`, encodeURIComponent(String(projectSlug !== undefined ? projectSlug : `-project-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (pageToken !== undefined) {
                localVarQueryParameter['page-token'] = pageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/{project-slug}/schedule',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a schedule by id.
         * @summary Get a schedule
         * @param {string} scheduleId The unique ID of the schedule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (scheduleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('getById', 'scheduleId', scheduleId)
            const localVarPath = `/schedule/{schedule-id}`
                .replace(`{${"schedule-id"}}`, encodeURIComponent(String(scheduleId !== undefined ? scheduleId : `-schedule-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/{schedule-id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Not yet available to projects that use GitLab or GitHub App. Deletes the schedule by id.
         * @summary Delete a schedule
         * @param {string} scheduleId The unique ID of the schedule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (scheduleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('removeById', 'scheduleId', scheduleId)
            const localVarPath = `/schedule/{schedule-id}`
                .replace(`{${"schedule-id"}}`, encodeURIComponent(String(scheduleId !== undefined ? scheduleId : `-schedule-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/{schedule-id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Not yet available to projects that use GitLab or GitHub App. Updates a schedule and returns the updated schedule.
         * @summary Update a schedule
         * @param {string} scheduleId The unique ID of the schedule.
         * @param {ScheduleUpdateScheduleRequest} [scheduleUpdateScheduleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule: async (scheduleId: string, scheduleUpdateScheduleRequest?: ScheduleUpdateScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('updateSchedule', 'scheduleId', scheduleId)
            const localVarPath = `/schedule/{schedule-id}`
                .replace(`{${"schedule-id"}}`, encodeURIComponent(String(scheduleId !== undefined ? scheduleId : `-schedule-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: scheduleUpdateScheduleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/{schedule-id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleUpdateScheduleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         * Not yet available to projects that use GitLab or GitHub App. Creates a schedule and returns the created schedule.
         * @summary Create a schedule
         * @param {ScheduleApiCreateNewScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewSchedule(requestParameters: ScheduleApiCreateNewScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleCreateNewScheduleResponse>> {
            const scheduleCreateNewScheduleRequest: ScheduleCreateNewScheduleRequest = {
                description: requestParameters.description,
                parameters: requestParameters.parameters,
                name: requestParameters.name,
                timetable: requestParameters.timetable,
                attribution-actor: requestParameters.attribution-actor
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewSchedule(requestParameters.projectSlug, scheduleCreateNewScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all schedules for this project.
         * @summary Get all schedules
         * @param {ScheduleApiGetAllSchedulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSchedules(requestParameters: ScheduleApiGetAllSchedulesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleGetAllSchedulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSchedules(requestParameters.projectSlug, requestParameters.pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a schedule by id.
         * @summary Get a schedule
         * @param {ScheduleApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ScheduleApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.scheduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Not yet available to projects that use GitLab or GitHub App. Deletes the schedule by id.
         * @summary Delete a schedule
         * @param {ScheduleApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: ScheduleApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleRemoveByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.scheduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Not yet available to projects that use GitLab or GitHub App. Updates a schedule and returns the updated schedule.
         * @summary Update a schedule
         * @param {ScheduleApiUpdateScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSchedule(requestParameters: ScheduleApiUpdateScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleUpdateScheduleResponse>> {
            const scheduleUpdateScheduleRequest: ScheduleUpdateScheduleRequest = {
                description: requestParameters.description,
                parameters: requestParameters.parameters,
                name: requestParameters.name,
                timetable: requestParameters.timetable,
                attribution-actor: requestParameters.attribution-actor
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchedule(requestParameters.scheduleId, scheduleUpdateScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleApiFp(configuration)
    return {
        /**
         * Not yet available to projects that use GitLab or GitHub App. Creates a schedule and returns the created schedule.
         * @summary Create a schedule
         * @param {ScheduleApiCreateNewScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSchedule(requestParameters: ScheduleApiCreateNewScheduleRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduleCreateNewScheduleResponse> {
            return localVarFp.createNewSchedule(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all schedules for this project.
         * @summary Get all schedules
         * @param {ScheduleApiGetAllSchedulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchedules(requestParameters: ScheduleApiGetAllSchedulesRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduleGetAllSchedulesResponse> {
            return localVarFp.getAllSchedules(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a schedule by id.
         * @summary Get a schedule
         * @param {ScheduleApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ScheduleApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduleGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Not yet available to projects that use GitLab or GitHub App. Deletes the schedule by id.
         * @summary Delete a schedule
         * @param {ScheduleApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: ScheduleApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduleRemoveByIdResponse> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Not yet available to projects that use GitLab or GitHub App. Updates a schedule and returns the updated schedule.
         * @summary Update a schedule
         * @param {ScheduleApiUpdateScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule(requestParameters: ScheduleApiUpdateScheduleRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduleUpdateScheduleResponse> {
            return localVarFp.updateSchedule(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewSchedule operation in ScheduleApi.
 * @export
 * @interface ScheduleApiCreateNewScheduleRequest
 */
export type ScheduleApiCreateNewScheduleRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof ScheduleApiCreateNewSchedule
    */
    readonly projectSlug: string
    
} & ScheduleCreateNewScheduleRequest

/**
 * Request parameters for getAllSchedules operation in ScheduleApi.
 * @export
 * @interface ScheduleApiGetAllSchedulesRequest
 */
export type ScheduleApiGetAllSchedulesRequest = {
    
    /**
    * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
    * @type {string}
    * @memberof ScheduleApiGetAllSchedules
    */
    readonly projectSlug: string
    
    /**
    * A token to retrieve the next page of results.
    * @type {string}
    * @memberof ScheduleApiGetAllSchedules
    */
    readonly pageToken?: string
    
}

/**
 * Request parameters for getById operation in ScheduleApi.
 * @export
 * @interface ScheduleApiGetByIdRequest
 */
export type ScheduleApiGetByIdRequest = {
    
    /**
    * The unique ID of the schedule.
    * @type {string}
    * @memberof ScheduleApiGetById
    */
    readonly scheduleId: string
    
}

/**
 * Request parameters for removeById operation in ScheduleApi.
 * @export
 * @interface ScheduleApiRemoveByIdRequest
 */
export type ScheduleApiRemoveByIdRequest = {
    
    /**
    * The unique ID of the schedule.
    * @type {string}
    * @memberof ScheduleApiRemoveById
    */
    readonly scheduleId: string
    
}

/**
 * Request parameters for updateSchedule operation in ScheduleApi.
 * @export
 * @interface ScheduleApiUpdateScheduleRequest
 */
export type ScheduleApiUpdateScheduleRequest = {
    
    /**
    * The unique ID of the schedule.
    * @type {string}
    * @memberof ScheduleApiUpdateSchedule
    */
    readonly scheduleId: string
    
} & ScheduleUpdateScheduleRequest

/**
 * ScheduleApiGenerated - object-oriented interface
 * @export
 * @class ScheduleApiGenerated
 * @extends {BaseAPI}
 */
export class ScheduleApiGenerated extends BaseAPI {
    /**
     * Not yet available to projects that use GitLab or GitHub App. Creates a schedule and returns the created schedule.
     * @summary Create a schedule
     * @param {ScheduleApiCreateNewScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiGenerated
     */
    public createNewSchedule(requestParameters: ScheduleApiCreateNewScheduleRequest, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).createNewSchedule(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all schedules for this project.
     * @summary Get all schedules
     * @param {ScheduleApiGetAllSchedulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiGenerated
     */
    public getAllSchedules(requestParameters: ScheduleApiGetAllSchedulesRequest, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).getAllSchedules(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a schedule by id.
     * @summary Get a schedule
     * @param {ScheduleApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiGenerated
     */
    public getById(requestParameters: ScheduleApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Not yet available to projects that use GitLab or GitHub App. Deletes the schedule by id.
     * @summary Delete a schedule
     * @param {ScheduleApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiGenerated
     */
    public removeById(requestParameters: ScheduleApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Not yet available to projects that use GitLab or GitHub App. Updates a schedule and returns the updated schedule.
     * @summary Update a schedule
     * @param {ScheduleApiUpdateScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiGenerated
     */
    public updateSchedule(requestParameters: ScheduleApiUpdateScheduleRequest, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).updateSchedule(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
