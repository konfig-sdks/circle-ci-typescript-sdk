/* tslint:disable */
/* eslint-disable */
/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

The version of the OpenAPI document: v2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WebhookCreateOutboundWebhookRequest } from '../models';
// @ts-ignore
import { WebhookCreateOutboundWebhookRequestScope } from '../models';
// @ts-ignore
import { WebhookCreateOutboundWebhookResponse } from '../models';
// @ts-ignore
import { WebhookCreateOutboundWebhookdefaultResponse } from '../models';
// @ts-ignore
import { WebhookDeleteOutboundWebhookResponse } from '../models';
// @ts-ignore
import { WebhookDeleteOutboundWebhookdefaultResponse } from '../models';
// @ts-ignore
import { WebhookGetByIdResponse } from '../models';
// @ts-ignore
import { WebhookGetByIddefaultResponse } from '../models';
// @ts-ignore
import { WebhookListMatchingScopeResponse } from '../models';
// @ts-ignore
import { WebhookListMatchingScopedefaultResponse } from '../models';
// @ts-ignore
import { WebhookUpdateOutboundWebhookRequest } from '../models';
// @ts-ignore
import { WebhookUpdateOutboundWebhookResponse } from '../models';
// @ts-ignore
import { WebhookUpdateOutboundWebhookdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebhookApi - axios parameter creator
 * @export
 */
export const WebhookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an outbound webhook.
         * @summary Create an outbound webhook
         * @param {WebhookCreateOutboundWebhookRequest} [webhookCreateOutboundWebhookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundWebhook: async (webhookCreateOutboundWebhookRequest?: WebhookCreateOutboundWebhookRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhookCreateOutboundWebhookRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhook',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhookCreateOutboundWebhookRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an outbound webhook
         * @summary Delete an outbound webhook
         * @param {string} webhookId ID of the webhook (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundWebhook: async (webhookId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('deleteOutboundWebhook', 'webhookId', webhookId)
            const localVarPath = `/webhook/{webhook-id}`
                .replace(`{${"webhook-id"}}`, encodeURIComponent(String(webhookId !== undefined ? webhookId : `-webhook-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhook/{webhook-id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an outbound webhook by id.
         * @summary Get a webhook
         * @param {string} webhookId ID of the webhook (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (webhookId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('getById', 'webhookId', webhookId)
            const localVarPath = `/webhook/{webhook-id}`
                .replace(`{${"webhook-id"}}`, encodeURIComponent(String(webhookId !== undefined ? webhookId : `-webhook-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhook/{webhook-id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of outbound webhooks that match the given scope-type and scope-id
         * @summary List webhooks
         * @param {string} scopeId ID of the scope being used (at the moment, only project ID is supported)
         * @param {'project'} scopeType Type of the scope being used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMatchingScope: async (scopeId: string, scopeType: 'project', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scopeId' is not null or undefined
            assertParamExists('listMatchingScope', 'scopeId', scopeId)
            // verify required parameter 'scopeType' is not null or undefined
            assertParamExists('listMatchingScope', 'scopeType', scopeType)
            const localVarPath = `/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (scopeId !== undefined) {
                localVarQueryParameter['scope-id'] = scopeId;
            }

            if (scopeType !== undefined) {
                localVarQueryParameter['scope-type'] = scopeType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhook',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an outbound webhook.
         * @summary Update an outbound webhook
         * @param {string} webhookId ID of the webhook (UUID)
         * @param {WebhookUpdateOutboundWebhookRequest} [webhookUpdateOutboundWebhookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundWebhook: async (webhookId: string, webhookUpdateOutboundWebhookRequest?: WebhookUpdateOutboundWebhookRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('updateOutboundWebhook', 'webhookId', webhookId)
            const localVarPath = `/webhook/{webhook-id}`
                .replace(`{${"webhook-id"}}`, encodeURIComponent(String(webhookId !== undefined ? webhookId : `-webhook-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Circle-Token", keyParamName: "apiKeyHeader", configuration })
            // authentication api_key_query required
            await setApiKeyToObject({object: localVarQueryParameter, key: "circle-token", keyParamName: "apiKeyQuery", configuration})
            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhookUpdateOutboundWebhookRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhook/{webhook-id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhookUpdateOutboundWebhookRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhookApi - functional programming interface
 * @export
 */
export const WebhookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an outbound webhook.
         * @summary Create an outbound webhook
         * @param {WebhookApiCreateOutboundWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOutboundWebhook(requestParameters: WebhookApiCreateOutboundWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookCreateOutboundWebhookResponse>> {
            const webhookCreateOutboundWebhookRequest: WebhookCreateOutboundWebhookRequest = {
                name: requestParameters.name,
                events: requestParameters.events,
                url: requestParameters.url,
                verify-tls: requestParameters.verify-tls,
                signing-secret: requestParameters.signing-secret,
                scope: requestParameters.scope
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOutboundWebhook(webhookCreateOutboundWebhookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an outbound webhook
         * @summary Delete an outbound webhook
         * @param {WebhookApiDeleteOutboundWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOutboundWebhook(requestParameters: WebhookApiDeleteOutboundWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookDeleteOutboundWebhookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOutboundWebhook(requestParameters.webhookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an outbound webhook by id.
         * @summary Get a webhook
         * @param {WebhookApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: WebhookApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.webhookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of outbound webhooks that match the given scope-type and scope-id
         * @summary List webhooks
         * @param {WebhookApiListMatchingScopeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMatchingScope(requestParameters: WebhookApiListMatchingScopeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookListMatchingScopeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMatchingScope(requestParameters.scopeId, requestParameters.scopeType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an outbound webhook.
         * @summary Update an outbound webhook
         * @param {WebhookApiUpdateOutboundWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOutboundWebhook(requestParameters: WebhookApiUpdateOutboundWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookUpdateOutboundWebhookResponse>> {
            const webhookUpdateOutboundWebhookRequest: WebhookUpdateOutboundWebhookRequest = {
                name: requestParameters.name,
                events: requestParameters.events,
                url: requestParameters.url,
                signing-secret: requestParameters.signing-secret,
                verify-tls: requestParameters.verify-tls
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOutboundWebhook(requestParameters.webhookId, webhookUpdateOutboundWebhookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhookApi - factory interface
 * @export
 */
export const WebhookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhookApiFp(configuration)
    return {
        /**
         * Creates an outbound webhook.
         * @summary Create an outbound webhook
         * @param {WebhookApiCreateOutboundWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundWebhook(requestParameters: WebhookApiCreateOutboundWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookCreateOutboundWebhookResponse> {
            return localVarFp.createOutboundWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an outbound webhook
         * @summary Delete an outbound webhook
         * @param {WebhookApiDeleteOutboundWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundWebhook(requestParameters: WebhookApiDeleteOutboundWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookDeleteOutboundWebhookResponse> {
            return localVarFp.deleteOutboundWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an outbound webhook by id.
         * @summary Get a webhook
         * @param {WebhookApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: WebhookApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of outbound webhooks that match the given scope-type and scope-id
         * @summary List webhooks
         * @param {WebhookApiListMatchingScopeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMatchingScope(requestParameters: WebhookApiListMatchingScopeRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookListMatchingScopeResponse> {
            return localVarFp.listMatchingScope(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an outbound webhook.
         * @summary Update an outbound webhook
         * @param {WebhookApiUpdateOutboundWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundWebhook(requestParameters: WebhookApiUpdateOutboundWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookUpdateOutboundWebhookResponse> {
            return localVarFp.updateOutboundWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOutboundWebhook operation in WebhookApi.
 * @export
 * @interface WebhookApiCreateOutboundWebhookRequest
 */
export type WebhookApiCreateOutboundWebhookRequest = {
    
} & WebhookCreateOutboundWebhookRequest

/**
 * Request parameters for deleteOutboundWebhook operation in WebhookApi.
 * @export
 * @interface WebhookApiDeleteOutboundWebhookRequest
 */
export type WebhookApiDeleteOutboundWebhookRequest = {
    
    /**
    * ID of the webhook (UUID)
    * @type {string}
    * @memberof WebhookApiDeleteOutboundWebhook
    */
    readonly webhookId: string
    
}

/**
 * Request parameters for getById operation in WebhookApi.
 * @export
 * @interface WebhookApiGetByIdRequest
 */
export type WebhookApiGetByIdRequest = {
    
    /**
    * ID of the webhook (UUID)
    * @type {string}
    * @memberof WebhookApiGetById
    */
    readonly webhookId: string
    
}

/**
 * Request parameters for listMatchingScope operation in WebhookApi.
 * @export
 * @interface WebhookApiListMatchingScopeRequest
 */
export type WebhookApiListMatchingScopeRequest = {
    
    /**
    * ID of the scope being used (at the moment, only project ID is supported)
    * @type {string}
    * @memberof WebhookApiListMatchingScope
    */
    readonly scopeId: string
    
    /**
    * Type of the scope being used
    * @type {'project'}
    * @memberof WebhookApiListMatchingScope
    */
    readonly scopeType: 'project'
    
}

/**
 * Request parameters for updateOutboundWebhook operation in WebhookApi.
 * @export
 * @interface WebhookApiUpdateOutboundWebhookRequest
 */
export type WebhookApiUpdateOutboundWebhookRequest = {
    
    /**
    * ID of the webhook (UUID)
    * @type {string}
    * @memberof WebhookApiUpdateOutboundWebhook
    */
    readonly webhookId: string
    
} & WebhookUpdateOutboundWebhookRequest

/**
 * WebhookApiGenerated - object-oriented interface
 * @export
 * @class WebhookApiGenerated
 * @extends {BaseAPI}
 */
export class WebhookApiGenerated extends BaseAPI {
    /**
     * Creates an outbound webhook.
     * @summary Create an outbound webhook
     * @param {WebhookApiCreateOutboundWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public createOutboundWebhook(requestParameters: WebhookApiCreateOutboundWebhookRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).createOutboundWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an outbound webhook
     * @summary Delete an outbound webhook
     * @param {WebhookApiDeleteOutboundWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public deleteOutboundWebhook(requestParameters: WebhookApiDeleteOutboundWebhookRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).deleteOutboundWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an outbound webhook by id.
     * @summary Get a webhook
     * @param {WebhookApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public getById(requestParameters: WebhookApiGetByIdRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of outbound webhooks that match the given scope-type and scope-id
     * @summary List webhooks
     * @param {WebhookApiListMatchingScopeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public listMatchingScope(requestParameters: WebhookApiListMatchingScopeRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).listMatchingScope(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an outbound webhook.
     * @summary Update an outbound webhook
     * @param {WebhookApiUpdateOutboundWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public updateOutboundWebhook(requestParameters: WebhookApiUpdateOutboundWebhookRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).updateOutboundWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
